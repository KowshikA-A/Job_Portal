{"ast":null,"code":"import React,{useState}from'react';import axios from'axios';import'./UploadPage.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const UploadPage=()=>{const[uploadStatus,setUploadStatus]=useState('');const[statusType,setStatusType]=useState('');// 'success' or 'error'\nconst[selectedFile,setSelectedFile]=useState(null);const handleFileChange=e=>{setSelectedFile(e.target.files[0]);setUploadStatus('');// Clear any previous messages when a new file is selected\nsetStatusType('');};const handleFileUpload=async()=>{if(!selectedFile){setStatusType('error');setUploadStatus('Please select a file to upload');return;}try{const formData=new FormData();formData.append('file',selectedFile);const response=await axios.post('/api/upload',formData,{headers:{'Content-Type':'multipart/form-data'}});setStatusType('success');setUploadStatus(response.data.message||'File uploaded successfully');// Success message from the backend\nsetSelectedFile(null);}catch(error){console.error('Upload error:',error);const errorMessage=error.response&&error.response.data&&error.response.data.message||'An error occurred during upload. Please ensure the file has the correct format and required columns.';setStatusType('error');setUploadStatus(`Error uploading file: ${String(errorMessage)}`);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"upload-container\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\" File Upload \"}),\" \",/*#__PURE__*/_jsxs(\"span\",{children:[/*#__PURE__*/_jsx(\"strong\",{className:\"red-text\",children:\" NOTE: \"}),\" The file you upload here will be added to the database. The file format should be '.CSV' or '.JSON'. \"]}),\" \",/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\" Required columns: \"}),\" \",/*#__PURE__*/_jsx(\"span\",{className:\"red-text\",children:\" Name, Reg_No, Year, School, Company, ApplicationStatus, Type, CTC \"}),\" \"]}),\" \",/*#__PURE__*/_jsx(\"input\",{type:\"file\",onChange:handleFileChange,accept:\".csv,.json\"}),/*#__PURE__*/_jsx(\"button\",{className:\"upload-button\",onClick:handleFileUpload,disabled:!selectedFile,children:\"Upload \"}),\" \",uploadStatus&&/*#__PURE__*/_jsxs(\"p\",{className:statusType==='success'?'success-message':'error-message',children:[\" \",uploadStatus,\" \"]}),\" \"]});};export default UploadPage;","map":{"version":3,"names":["React","useState","axios","jsx","_jsx","jsxs","_jsxs","UploadPage","uploadStatus","setUploadStatus","statusType","setStatusType","selectedFile","setSelectedFile","handleFileChange","e","target","files","handleFileUpload","formData","FormData","append","response","post","headers","data","message","error","console","errorMessage","String","className","children","type","onChange","accept","onClick","disabled"],"sources":["/Users/roopakowshika/placement/placement__/frontend/src/components/UploadPage.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport './UploadPage.css';\n\nconst UploadPage = () => {\n    const [uploadStatus, setUploadStatus] = useState('');\n    const [statusType, setStatusType] = useState(''); // 'success' or 'error'\n    const [selectedFile, setSelectedFile] = useState(null);\n\n    const handleFileChange = (e) => {\n        setSelectedFile(e.target.files[0]);\n        setUploadStatus(''); // Clear any previous messages when a new file is selected\n        setStatusType('');\n    };\n\n    const handleFileUpload = async() => {\n        if (!selectedFile) {\n            setStatusType('error');\n            setUploadStatus('Please select a file to upload');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append('file', selectedFile);\n\n            const response = await axios.post('/api/upload', formData, {\n                headers: {\n                    'Content-Type': 'multipart/form-data',\n                },\n            });\n\n            setStatusType('success');\n            setUploadStatus(response.data.message || 'File uploaded successfully'); // Success message from the backend\n            setSelectedFile(null);\n        } catch (error) {\n            console.error('Upload error:', error);\n\n            const errorMessage =\n                (error.response && error.response.data && error.response.data.message) ||\n                'An error occurred during upload. Please ensure the file has the correct format and required columns.';\n\n            setStatusType('error');\n            setUploadStatus(`Error uploading file: ${String(errorMessage)}`);\n        }\n    };\n\n    return ( <\n        div className = \"upload-container\" >\n        <\n        h1 > File Upload < /h1> <\n        span >\n        <\n        strong className = \"red-text\" > NOTE: < /strong> The file you upload here will be added to the database. The file format should be '.CSV' or '.JSON'. <\n        /span> <\n        p >\n        <\n        strong > Required columns: < /strong> <\n        span className = \"red-text\" > Name, Reg_No, Year, School, Company, ApplicationStatus, Type, CTC < /span> <\n        /p> <\n        input type = \"file\"\n        onChange = { handleFileChange }\n        accept = \".csv,.json\" /\n        >\n        <\n        button className = \"upload-button\"\n        onClick = { handleFileUpload }\n        disabled = {!selectedFile } >\n        Upload <\n        /button> {\n            uploadStatus && ( <\n                p className = { statusType === 'success' ? 'success-message' : 'error-message' } > { uploadStatus } <\n                /p>\n            )\n        } <\n        /div>\n    );\n};\n\nexport default UploadPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}