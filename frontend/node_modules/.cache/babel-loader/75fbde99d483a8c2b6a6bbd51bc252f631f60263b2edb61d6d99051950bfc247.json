{"ast":null,"code":"var _jsxFileName = \"/Users/roopakowshika/placement/placement__/frontend/src/components/StudentList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport StudentCard from './StudentCard';\nimport StudentDetailModal from './StudentDetailModal';\nimport './StudentList.css';\nimport { fetchStudents } from '../api/studentAPI';\nimport { groupByRegNo } from '../utils/groupByRegNo';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction StudentList({\n  filter,\n  year,\n  searchTerm,\n  schoolFilter,\n  typeFilter\n}) {\n  _s();\n  const [students, setStudents] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [selectedStudent, setSelectedStudent] = useState(null);\n  useEffect(() => {\n    const loadStudents = async () => {\n      try {\n        setLoading(true);\n        const data = await fetchStudents(filter, year, searchTerm);\n        if (Array.isArray(data)) {\n          const groupedData = groupByRegNo(data); // Assumes the data is grouped by Reg No\n          setStudents(groupedData);\n        } else {\n          console.error('Fetched data is not an array:', data);\n          setError('Unexpected data format from server.');\n        }\n      } catch (error) {\n        console.error('Error loading students:', error);\n        setError('Failed to load student data.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadStudents();\n  }, [filter, year, searchTerm]);\n  const handleStudentClick = student => {\n    setSelectedStudent(student);\n  };\n  const closeModal = () => {\n    setSelectedStudent(null);\n  };\n\n  // Apply the filters\n  const filteredStudents = students.map(group => group.filter(student => {\n    // Check if student's school matches the filter, case-insensitive\n    const matchesSchool = schoolFilter ? student.School.toLowerCase().includes(schoolFilter.toLowerCase()) : true;\n    // Check if student's type matches the filter, case-insensitive\n    const matchesType = typeFilter ? student.Type.toLowerCase().includes(typeFilter.toLowerCase()) : true;\n    return matchesSchool && matchesType;\n  })).filter(group => group.length > 0); // Remove any empty groups after filtering\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \" Loading... \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 16\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: [\" \", error, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"student-list\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        marginLeft: '20px',\n        fontSize: '30px'\n      },\n      children: \" Students \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"student-cards-container\",\n      children: [\" \", filteredStudents.length > 0 ? filteredStudents.map((group, index) => group.map(student => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => handleStudentClick(student),\n        children: [/*#__PURE__*/_jsxDEV(StudentCard, {\n          student: student\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 25\n        }, this), \" \"]\n      }, student.Reg_No, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 46\n      }, this))) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" No students found matching this criteria. \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 19\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 74\n    }, this), \" \", selectedStudent && /*#__PURE__*/_jsxDEV(StudentDetailModal, {\n      student: selectedStudent,\n      onClose: closeModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 34\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 14\n  }, this);\n}\n_s(StudentList, \"CO+Hx9sZEMMoPeW8Bk+Uhy/CJCQ=\");\n_c = StudentList;\nexport default StudentList;\nvar _c;\n$RefreshReg$(_c, \"StudentList\");","map":{"version":3,"names":["React","useState","useEffect","StudentCard","StudentDetailModal","fetchStudents","groupByRegNo","jsxDEV","_jsxDEV","StudentList","filter","year","searchTerm","schoolFilter","typeFilter","_s","students","setStudents","loading","setLoading","error","setError","selectedStudent","setSelectedStudent","loadStudents","data","Array","isArray","groupedData","console","handleStudentClick","student","closeModal","filteredStudents","map","group","matchesSchool","School","toLowerCase","includes","matchesType","Type","length","children","fileName","_jsxFileName","lineNumber","columnNumber","className","style","marginLeft","fontSize","index","onClick","Reg_No","onClose","_c","$RefreshReg$"],"sources":["/Users/roopakowshika/placement/placement__/frontend/src/components/StudentList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport StudentCard from './StudentCard';\nimport StudentDetailModal from './StudentDetailModal';\nimport './StudentList.css';\nimport { fetchStudents } from '../api/studentAPI';\nimport { groupByRegNo } from '../utils/groupByRegNo';\n\nfunction StudentList({ filter, year, searchTerm, schoolFilter, typeFilter }) {\n    const [students, setStudents] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [selectedStudent, setSelectedStudent] = useState(null);\n\n    useEffect(() => {\n        const loadStudents = async() => {\n            try {\n                setLoading(true);\n                const data = await fetchStudents(filter, year, searchTerm);\n\n                if (Array.isArray(data)) {\n                    const groupedData = groupByRegNo(data); // Assumes the data is grouped by Reg No\n                    setStudents(groupedData);\n                } else {\n                    console.error('Fetched data is not an array:', data);\n                    setError('Unexpected data format from server.');\n                }\n            } catch (error) {\n                console.error('Error loading students:', error);\n                setError('Failed to load student data.');\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        loadStudents();\n    }, [filter, year, searchTerm]);\n\n    const handleStudentClick = (student) => {\n        setSelectedStudent(student);\n    };\n\n    const closeModal = () => {\n        setSelectedStudent(null);\n    };\n\n    // Apply the filters\n    const filteredStudents = students\n        .map(group => group.filter(student => {\n            // Check if student's school matches the filter, case-insensitive\n            const matchesSchool = schoolFilter ? student.School.toLowerCase().includes(schoolFilter.toLowerCase()) : true;\n            // Check if student's type matches the filter, case-insensitive\n            const matchesType = typeFilter ? student.Type.toLowerCase().includes(typeFilter.toLowerCase()) : true;\n            return matchesSchool && matchesType;\n        }))\n        .filter(group => group.length > 0); // Remove any empty groups after filtering\n\n    if (loading) {\n        return <p > Loading... < /p>;\n    }\n\n    if (error) {\n        return <p className = \"error-message\" > { error } < /p>;\n    }\n\n    return ( <\n        div className = \"student-list\" >\n        <\n        h2 style = {\n            { marginLeft: '20px', fontSize: '30px' } } > Students < /h2> <\n        div className = \"student-cards-container\" > {\n            filteredStudents.length > 0 ? (\n                filteredStudents.map((group, index) => (\n                    group.map((student) => ( <\n                        div onClick = {\n                            () => handleStudentClick(student) }\n                        key = { student.Reg_No } >\n                        <\n                        StudentCard student = { student }\n                        /> <\n                        /div>\n                    ))\n                ))\n            ) : ( <\n                p > No students found matching this criteria. < /p>\n            )\n        } <\n        /div> {\n            selectedStudent && ( <\n                StudentDetailModal student = { selectedStudent }\n                onClose = { closeModal }\n                />\n            )\n        } <\n        /div>\n    );\n}\n\nexport default StudentList;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}