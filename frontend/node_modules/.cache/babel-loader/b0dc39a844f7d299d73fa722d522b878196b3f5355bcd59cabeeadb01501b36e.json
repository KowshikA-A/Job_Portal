{"ast":null,"code":"export function groupStudents(students, groupBy) {\n  return students.reduce((acc, student) => {\n    // Determine the primary key to group by\n    const key = groupBy === 'School' ? student.School : student.Reg_No;\n\n    // Check if the key (Reg_No or School) already exists in the accumulator\n    if (!acc[key]) {\n      // If not, initialize an entry for the key with an empty array of students\n      acc[key] = [];\n    }\n\n    // Add the student to the appropriate group (based on Reg_No or School)\n    acc[key].push({\n      Name: student.Name,\n      Reg_No: student.Reg_No,\n      Year: student.Year,\n      School: student.School,\n      Company: student.Company,\n      ApplicationStatus: student.ApplicationStatus,\n      Type: student.Type,\n      CTC: student.CTC\n    });\n    return acc;\n  }, {}); // Start with an empty object\n}","map":{"version":3,"names":["groupStudents","students","groupBy","reduce","acc","student","key","School","Reg_No","push","Name","Year","Company","ApplicationStatus","Type","CTC"],"sources":["/Users/roopakowshika/placement/placement__/frontend/src/utils/groupByRegNo.js"],"sourcesContent":["export function groupStudents(students, groupBy) {\n    return students.reduce((acc, student) => {\n        // Determine the primary key to group by\n        const key = groupBy === 'School' ? student.School : student.Reg_No;\n\n        // Check if the key (Reg_No or School) already exists in the accumulator\n        if (!acc[key]) {\n            // If not, initialize an entry for the key with an empty array of students\n            acc[key] = [];\n        }\n\n        // Add the student to the appropriate group (based on Reg_No or School)\n        acc[key].push({\n            Name: student.Name,\n            Reg_No: student.Reg_No,\n            Year: student.Year,\n            School: student.School,\n            Company: student.Company,\n            ApplicationStatus: student.ApplicationStatus,\n            Type: student.Type,\n            CTC: student.CTC\n        });\n\n        return acc;\n    }, {}); // Start with an empty object\n}"],"mappings":"AAAA,OAAO,SAASA,aAAaA,CAACC,QAAQ,EAAEC,OAAO,EAAE;EAC7C,OAAOD,QAAQ,CAACE,MAAM,CAAC,CAACC,GAAG,EAAEC,OAAO,KAAK;IACrC;IACA,MAAMC,GAAG,GAAGJ,OAAO,KAAK,QAAQ,GAAGG,OAAO,CAACE,MAAM,GAAGF,OAAO,CAACG,MAAM;;IAElE;IACA,IAAI,CAACJ,GAAG,CAACE,GAAG,CAAC,EAAE;MACX;MACAF,GAAG,CAACE,GAAG,CAAC,GAAG,EAAE;IACjB;;IAEA;IACAF,GAAG,CAACE,GAAG,CAAC,CAACG,IAAI,CAAC;MACVC,IAAI,EAAEL,OAAO,CAACK,IAAI;MAClBF,MAAM,EAAEH,OAAO,CAACG,MAAM;MACtBG,IAAI,EAAEN,OAAO,CAACM,IAAI;MAClBJ,MAAM,EAAEF,OAAO,CAACE,MAAM;MACtBK,OAAO,EAAEP,OAAO,CAACO,OAAO;MACxBC,iBAAiB,EAAER,OAAO,CAACQ,iBAAiB;MAC5CC,IAAI,EAAET,OAAO,CAACS,IAAI;MAClBC,GAAG,EAAEV,OAAO,CAACU;IACjB,CAAC,CAAC;IAEF,OAAOX,GAAG;EACd,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}