{"ast":null,"code":"export function groupByRegNo(students) {\n  return students.reduce((acc, student) => {\n    const regNo = student.Reg_No; // We use Reg_No as the key to group students by\n\n    if (!acc[regNo]) {\n      // If this is the first student with this Reg_No, initialize an entry\n      acc[regNo] = {\n        Name: student.Name,\n        Reg_No: student.Reg_No,\n        Year: student.Year,\n        School: student.School,\n        Applications: [] // Initialize the Applications array for this student\n      };\n    }\n\n    // Push the application details into the Applications array for this student\n    acc[regNo].Applications.push({\n      Company: student.Company,\n      ApplicationStatus: student.ApplicationStatus,\n      Type: student.Type,\n      CTC: student.CTC\n    });\n    return acc; // Return the updated accumulator\n  }, {}); // Start with an empty object as the accumulator\n}","map":{"version":3,"names":["groupByRegNo","students","reduce","acc","student","regNo","Reg_No","Name","Year","School","Applications","push","Company","ApplicationStatus","Type","CTC"],"sources":["/Users/roopakowshika/placement/placement__/frontend/src/utils/groupByRegNo.js"],"sourcesContent":["export function groupByRegNo(students) {\n    return students.reduce((acc, student) => {\n        const regNo = student.Reg_No; // We use Reg_No as the key to group students by\n\n        if (!acc[regNo]) {\n            // If this is the first student with this Reg_No, initialize an entry\n            acc[regNo] = {\n                Name: student.Name,\n                Reg_No: student.Reg_No,\n                Year: student.Year,\n                School: student.School,\n                Applications: [] // Initialize the Applications array for this student\n            };\n        }\n\n        // Push the application details into the Applications array for this student\n        acc[regNo].Applications.push({\n            Company: student.Company,\n            ApplicationStatus: student.ApplicationStatus,\n            Type: student.Type,\n            CTC: student.CTC\n        });\n\n        return acc; // Return the updated accumulator\n    }, {}); // Start with an empty object as the accumulator\n}"],"mappings":"AAAA,OAAO,SAASA,YAAYA,CAACC,QAAQ,EAAE;EACnC,OAAOA,QAAQ,CAACC,MAAM,CAAC,CAACC,GAAG,EAAEC,OAAO,KAAK;IACrC,MAAMC,KAAK,GAAGD,OAAO,CAACE,MAAM,CAAC,CAAC;;IAE9B,IAAI,CAACH,GAAG,CAACE,KAAK,CAAC,EAAE;MACb;MACAF,GAAG,CAACE,KAAK,CAAC,GAAG;QACTE,IAAI,EAAEH,OAAO,CAACG,IAAI;QAClBD,MAAM,EAAEF,OAAO,CAACE,MAAM;QACtBE,IAAI,EAAEJ,OAAO,CAACI,IAAI;QAClBC,MAAM,EAAEL,OAAO,CAACK,MAAM;QACtBC,YAAY,EAAE,EAAE,CAAC;MACrB,CAAC;IACL;;IAEA;IACAP,GAAG,CAACE,KAAK,CAAC,CAACK,YAAY,CAACC,IAAI,CAAC;MACzBC,OAAO,EAAER,OAAO,CAACQ,OAAO;MACxBC,iBAAiB,EAAET,OAAO,CAACS,iBAAiB;MAC5CC,IAAI,EAAEV,OAAO,CAACU,IAAI;MAClBC,GAAG,EAAEX,OAAO,CAACW;IACjB,CAAC,CAAC;IAEF,OAAOZ,GAAG,CAAC,CAAC;EAChB,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}