{"ast":null,"code":"var _jsxFileName = \"/Users/roopakowshika/placement/placement__/frontend/src/components/CompanyList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './CompanyList.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CompanyList({\n  year\n}) {\n  _s();\n  const [companies, setCompanies] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchCompanies = async () => {\n      setLoading(true);\n      setError(null);\n      try {\n        // Use the correct environment variable for the API URL\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/api/companies?year=${year}`, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n\n        // Check if the response is OK (status code in the 200-299 range)\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`); // Include status for better debugging\n        }\n        const data = await response.json();\n\n        // Log the fetched data for debugging\n        console.log('Fetched companies:', data);\n\n        // Update state with fetched data\n        setCompanies(data);\n      } catch (error) {\n        // Handle errors gracefully\n        console.error('Error fetching company data:', error);\n        setError('Error fetching company data. Please try again later.');\n      } finally {\n        // Always set loading to false after fetch attempt\n        setLoading(false);\n      }\n    };\n\n    // Only fetch companies if the year is valid\n    if (year) {\n      fetchCompanies();\n    }\n  }, [year]);\n\n  // Display loading message\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \" Loading... \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 16\n    }, this);\n  }\n\n  // Display error message\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: [\" Error: \", error, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"company-list\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \" Companies Visited \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"company-list-items\",\n      children: [\" \", companies.length > 0 ? companies.map((company, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"company-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\" \", company.name, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" Total Students Placed: \", company.placedCount, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 50\n        }, this), \" \"]\n      }, company.name + index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 53\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" No companies found \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 19\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 39\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 14\n  }, this);\n}\n_s(CompanyList, \"yiHW6JhPhXEO1IWZQ8B6P5YKOfQ=\");\n_c = CompanyList;\nexport default CompanyList;\nvar _c;\n$RefreshReg$(_c, \"CompanyList\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","CompanyList","year","_s","companies","setCompanies","loading","setLoading","error","setError","fetchCompanies","response","fetch","process","env","REACT_APP_API_URL","headers","ok","Error","status","data","json","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","className","length","map","company","index","name","placedCount","_c","$RefreshReg$"],"sources":["/Users/roopakowshika/placement/placement__/frontend/src/components/CompanyList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './CompanyList.css';\n\nfunction CompanyList({ year }) {\n    const [companies, setCompanies] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        const fetchCompanies = async() => {\n            setLoading(true);\n            setError(null);\n\n            try {\n                // Use the correct environment variable for the API URL\n                const response = await fetch(`${process.env.REACT_APP_API_URL}/api/companies?year=${year}`, {\n                    headers: {\n                        'Content-Type': 'application/json'\n                    }\n                });\n\n                // Check if the response is OK (status code in the 200-299 range)\n                if (!response.ok) {\n                    throw new Error(`HTTP error! Status: ${response.status}`); // Include status for better debugging\n                }\n\n                const data = await response.json();\n\n                // Log the fetched data for debugging\n                console.log('Fetched companies:', data);\n\n                // Update state with fetched data\n                setCompanies(data);\n            } catch (error) {\n                // Handle errors gracefully\n                console.error('Error fetching company data:', error);\n                setError('Error fetching company data. Please try again later.');\n            } finally {\n                // Always set loading to false after fetch attempt\n                setLoading(false);\n            }\n        };\n\n        // Only fetch companies if the year is valid\n        if (year) {\n            fetchCompanies();\n        }\n    }, [year]);\n\n    // Display loading message\n    if (loading) {\n        return <p > Loading... < /p>;\n    }\n\n    // Display error message\n    if (error) {\n        return <p style = {\n            { color: 'red' }\n        } > Error: { error } < /p>; \n    }\n\n    return ( <\n        div className = \"company-list\" >\n        <\n        h2 > Companies Visited < /h2> <\n        div className = \"company-list-items\" > {\n            companies.length > 0 ? (\n                companies.map((company, index) => ( <\n                    div key = { company.name + index }\n                    className = \"company-card\" >\n                    <\n                    h3 > { company.name } < /h3> <\n                    p > Total Students Placed: { company.placedCount } < /p> < /\n                    div >\n                ))\n            ) : ( <\n                p > No companies found < /p>\n            )\n        } <\n        /div> < /\n        div >\n    );\n}\n\nexport default CompanyList;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}