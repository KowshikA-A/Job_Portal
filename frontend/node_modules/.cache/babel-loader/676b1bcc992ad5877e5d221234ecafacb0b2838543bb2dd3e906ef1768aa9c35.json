{"ast":null,"code":"var _jsxFileName = \"/Users/roopakowshika/placement/placement__/frontend/src/components/Monitoring.js\",\n  _s = $RefreshSig$();\n// Monitoring.js\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios'; // To make API requests\nimport { Bar } from 'react-chartjs-2'; // For the chart\nimport 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Monitoring() {\n  _s();\n  const [numYears, setNumYears] = useState(1); // Number of years to compare\n  const [selectedYears, setSelectedYears] = useState([]); // Selected years\n  const [companyList, setCompanyList] = useState([]); // List of companies\n  const [selectedCompany, setSelectedCompany] = useState(''); // Selected company\n  const [placementData, setPlacementData] = useState([]); // Placement data\n\n  useEffect(() => {\n    // Fetch the list of companies from your API\n    axios.get('/api/companies').then(response => {\n      setCompanyList(response.data);\n    }).catch(error => {\n      console.error('Error fetching companies:', error);\n    });\n  }, []);\n  const handleNumYearsChange = e => {\n    setNumYears(Number(e.target.value));\n    setSelectedYears(new Array(Number(e.target.value)).fill('')); // Reset year selection\n  };\n  const handleYearChange = (index, e) => {\n    const newSelectedYears = [...selectedYears];\n    newSelectedYears[index] = e.target.value;\n    setSelectedYears(newSelectedYears);\n  };\n  const handleCompanyChange = e => {\n    setSelectedCompany(e.target.value);\n  };\n  const fetchPlacementData = () => {\n    const year = selectedYears[0]; // Assuming we fetch data for the first selected year\n    if (selectedCompany && year) {\n      axios.get(`/api/company?company=${selectedCompany}&year=${year}`).then(response => {\n        setPlacementData(response.data);\n      }).catch(error => {\n        console.error('Error fetching placement data:', error);\n      });\n    }\n  };\n  const chartData = {\n    labels: placementData.map(item => item.status),\n    // Map status for labels\n    datasets: [{\n      label: `Placements for ${selectedCompany || 'All Companies'}`,\n      data: placementData.map(item => item.count),\n      // Use count for data\n      backgroundColor: 'rgba(75, 192, 192, 0.6)',\n      borderColor: 'rgba(75, 192, 192, 1)',\n      borderWidth: 1\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \" Monitoring Placements \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"numYears\",\n      children: \" Select number of years to compare: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 43\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"numYears\",\n      type: \"number\",\n      value: numYears,\n      onChange: handleNumYearsChange,\n      min: \"1\",\n      max: \"5\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 83\n    }, this), Array.from({\n      length: numYears\n    }).map((_, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: `year${index}`,\n        children: [\" Select Year \", index + 1, \": \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"select\", {\n        id: `year${index}`,\n        value: selectedYears[index] || '',\n        onChange: e => handleYearChange(index, e),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \" Select Year \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 17\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"2023\",\n          children: \" 2023 \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 60\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"2022\",\n          children: \" 2022 \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 57\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"2021\",\n          children: \" 2021 \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 57\n        }, this), \" \", \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 91\n      }, this), \" \"]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 66\n    }, this)), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"company\",\n      children: \" Select Company(Optional): \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"select\", {\n      id: \"company\",\n      value: selectedCompany,\n      onChange: handleCompanyChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \" All Companies \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), \" \", companyList.map(company => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: company.name,\n        children: [\" \", company.name, \" \"]\n      }, company.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 44\n      }, this)), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 73\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchPlacementData,\n      children: \" Get Placement Data \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }, this), placementData.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '600px',\n        height: '400px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Bar, {\n        data: chartData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 43\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 14\n  }, this);\n}\n_s(Monitoring, \"ZPHvLEIll+Kp8wfP0PymDJW7GY4=\");\n_c = Monitoring;\nexport default Monitoring;\nvar _c;\n$RefreshReg$(_c, \"Monitoring\");","map":{"version":3,"names":["React","useState","useEffect","axios","Bar","jsxDEV","_jsxDEV","Monitoring","_s","numYears","setNumYears","selectedYears","setSelectedYears","companyList","setCompanyList","selectedCompany","setSelectedCompany","placementData","setPlacementData","get","then","response","data","catch","error","console","handleNumYearsChange","e","Number","target","value","Array","fill","handleYearChange","index","newSelectedYears","handleCompanyChange","fetchPlacementData","year","chartData","labels","map","item","status","datasets","label","count","backgroundColor","borderColor","borderWidth","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","type","onChange","min","max","from","length","_","company","name","onClick","style","width","height","_c","$RefreshReg$"],"sources":["/Users/roopakowshika/placement/placement__/frontend/src/components/Monitoring.js"],"sourcesContent":["// Monitoring.js\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios'; // To make API requests\nimport { Bar } from 'react-chartjs-2'; // For the chart\nimport 'chart.js/auto';\n\nfunction Monitoring() {\n    const [numYears, setNumYears] = useState(1); // Number of years to compare\n    const [selectedYears, setSelectedYears] = useState([]); // Selected years\n    const [companyList, setCompanyList] = useState([]); // List of companies\n    const [selectedCompany, setSelectedCompany] = useState(''); // Selected company\n    const [placementData, setPlacementData] = useState([]); // Placement data\n\n    useEffect(() => {\n        // Fetch the list of companies from your API\n        axios.get('/api/companies')\n            .then((response) => {\n                setCompanyList(response.data);\n            })\n            .catch((error) => {\n                console.error('Error fetching companies:', error);\n            });\n    }, []);\n\n    const handleNumYearsChange = (e) => {\n        setNumYears(Number(e.target.value));\n        setSelectedYears(new Array(Number(e.target.value)).fill('')); // Reset year selection\n    };\n\n    const handleYearChange = (index, e) => {\n        const newSelectedYears = [...selectedYears];\n        newSelectedYears[index] = e.target.value;\n        setSelectedYears(newSelectedYears);\n    };\n\n    const handleCompanyChange = (e) => {\n        setSelectedCompany(e.target.value);\n    };\n\n    const fetchPlacementData = () => {\n        const year = selectedYears[0]; // Assuming we fetch data for the first selected year\n        if (selectedCompany && year) {\n            axios.get(`/api/company?company=${selectedCompany}&year=${year}`)\n                .then((response) => {\n                    setPlacementData(response.data);\n                })\n                .catch((error) => {\n                    console.error('Error fetching placement data:', error);\n                });\n        }\n    };\n\n    const chartData = {\n        labels: placementData.map(item => item.status), // Map status for labels\n        datasets: [{\n            label: `Placements for ${selectedCompany || 'All Companies'}`,\n            data: placementData.map(item => item.count), // Use count for data\n            backgroundColor: 'rgba(75, 192, 192, 0.6)',\n            borderColor: 'rgba(75, 192, 192, 1)',\n            borderWidth: 1,\n        }],\n    };\n\n    return ( <\n        div >\n        <\n        h2 > Monitoring Placements < /h2> <\n        label htmlFor = \"numYears\" > Select number of years to compare: < /label> <\n        input id = \"numYears\"\n        type = \"number\"\n        value = { numYears }\n        onChange = { handleNumYearsChange }\n        min = \"1\"\n        max = \"5\" / >\n\n        {\n            Array.from({ length: numYears }).map((_, index) => ( <\n                div key = { index } >\n                <\n                label htmlFor = { `year${index}` } > Select Year { index + 1 }: < /label> <\n                select id = { `year${index}` }\n                value = { selectedYears[index] || '' }\n                onChange = {\n                    (e) => handleYearChange(index, e) } >\n                <\n                option value = \"\" > Select Year < /option> <\n                option value = \"2023\" > 2023 < /option> <\n                option value = \"2022\" > 2022 < /option> <\n                option value = \"2021\" > 2021 < /option> { /* Add more options as necessary */ } <\n                /select> <\n                /div>\n            ))\n        }\n\n        <\n        label htmlFor = \"company\" > Select Company(Optional): < /label> <\n        select id = \"company\"\n        value = { selectedCompany }\n        onChange = { handleCompanyChange } >\n        <\n        option value = \"\" > All Companies < /option> {\n            companyList.map((company) => ( <\n                option key = { company.id }\n                value = { company.name } > { company.name } < /option>\n            ))\n        } <\n        /select>\n\n        <\n        button onClick = { fetchPlacementData } > Get Placement Data < /button>\n\n        {\n            placementData.length > 0 && ( <\n                div style = {\n                    { width: '600px', height: '400px' } } >\n                <\n                Bar data = { chartData }\n                /> <\n                /div>\n            )\n        } <\n        /div>\n    );\n}\n\nexport default Monitoring;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}