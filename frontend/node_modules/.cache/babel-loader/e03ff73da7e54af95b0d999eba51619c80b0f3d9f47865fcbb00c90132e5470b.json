{"ast":null,"code":"var _jsxFileName = \"/Users/roopakowshika/placement/placement__/frontend/src/components/StudentList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport StudentCard from './StudentCard';\nimport StudentDetailModal from './StudentDetailModal';\nimport './StudentList.css';\nimport { fetchStudents } from '../api/studentAPI';\nimport { groupByRegNo } from '../utils/groupByRegNo';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction StudentList({\n  filter,\n  year,\n  searchTerm,\n  schoolFilter,\n  typeFilter\n}) {\n  _s();\n  const [students, setStudents] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [selectedStudent, setSelectedStudent] = useState(null);\n  useEffect(() => {\n    const loadStudents = async () => {\n      try {\n        setLoading(true);\n        const data = await fetchStudents(filter, year, searchTerm);\n        console.log(\"Fetched data:\", data); // Debug log for fetched data\n\n        if (Array.isArray(data)) {\n          const groupedData = groupByRegNo(data);\n          console.log(\"Grouped data:\", groupedData); // Debug log for grouped data\n          setStudents(Object.values(groupedData)); // Values are now arrays of students\n        } else {\n          console.error('Fetched data is not an array:', data);\n          setError('Unexpected data format from server.');\n        }\n      } catch (error) {\n        console.error('Error loading students:', error);\n        setError('Failed to load student data.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadStudents();\n  }, [filter, year, searchTerm]);\n  const handleStudentClick = student => {\n    setSelectedStudent(student);\n  };\n  const closeModal = () => {\n    setSelectedStudent(null);\n  };\n\n  // Apply filters only if filter is not \"All Students\"\n  const filteredStudents = students.map(group => {\n    // Ensure group is an array before applying filter\n    if (Array.isArray(group)) {\n      return group.filter(student => {\n        // Apply filters for school, type, and year only if filter is not \"All Students\"\n        let matches = true;\n        if (filter !== 'All Students') {\n          // Apply school filter\n          const matchesSchool = schoolFilter ? student.School && student.School.toLowerCase().includes(schoolFilter.toLowerCase()) : true;\n\n          // Apply type filter\n          const matchesType = typeFilter ? student.Type && student.Type.toLowerCase().includes(typeFilter.toLowerCase()) : true;\n\n          // Apply year filter\n          const matchesYear = year ? student.Year && student.Year === year : true;\n          matches = matchesSchool && matchesType && matchesYear;\n        }\n        return matches;\n      });\n    }\n    return []; // If group is not an array, return an empty array\n  }).flat() // Flatten the resulting array of arrays\n  .filter(student => student !== undefined); // Remove undefined values, if any\n\n  console.log(\"Filtered students:\", filteredStudents); // Debug log for filtered students\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \" Loading... \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 16\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: [\" \", error, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"student-list\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        marginLeft: '20px',\n        fontSize: '30px'\n      },\n      children: \" Students \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"student-cards-container\",\n      children: [\" \", filteredStudents.length > 0 ? filteredStudents.map(student => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => handleStudentClick(student),\n        children: [/*#__PURE__*/_jsxDEV(StudentCard, {\n          student: student\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this), \" \"]\n      }, student.Reg_No, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 53\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" No students found matching this criteria. \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 19\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 74\n    }, this), \" \", selectedStudent && /*#__PURE__*/_jsxDEV(StudentDetailModal, {\n      student: selectedStudent,\n      onClose: closeModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 34\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 14\n  }, this);\n}\n_s(StudentList, \"CO+Hx9sZEMMoPeW8Bk+Uhy/CJCQ=\");\n_c = StudentList;\nexport default StudentList;\nvar _c;\n$RefreshReg$(_c, \"StudentList\");","map":{"version":3,"names":["React","useState","useEffect","StudentCard","StudentDetailModal","fetchStudents","groupByRegNo","jsxDEV","_jsxDEV","StudentList","filter","year","searchTerm","schoolFilter","typeFilter","_s","students","setStudents","loading","setLoading","error","setError","selectedStudent","setSelectedStudent","loadStudents","data","console","log","Array","isArray","groupedData","Object","values","handleStudentClick","student","closeModal","filteredStudents","map","group","matches","matchesSchool","School","toLowerCase","includes","matchesType","Type","matchesYear","Year","flat","undefined","children","fileName","_jsxFileName","lineNumber","columnNumber","className","style","marginLeft","fontSize","length","onClick","Reg_No","onClose","_c","$RefreshReg$"],"sources":["/Users/roopakowshika/placement/placement__/frontend/src/components/StudentList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport StudentCard from './StudentCard';\nimport StudentDetailModal from './StudentDetailModal';\nimport './StudentList.css';\nimport { fetchStudents } from '../api/studentAPI';\nimport { groupByRegNo } from '../utils/groupByRegNo';\n\nfunction StudentList({ filter, year, searchTerm, schoolFilter, typeFilter }) {\n    const [students, setStudents] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [selectedStudent, setSelectedStudent] = useState(null);\n\n    useEffect(() => {\n        const loadStudents = async() => {\n            try {\n                setLoading(true);\n                const data = await fetchStudents(filter, year, searchTerm);\n                console.log(\"Fetched data:\", data); // Debug log for fetched data\n\n                if (Array.isArray(data)) {\n                    const groupedData = groupByRegNo(data);\n                    console.log(\"Grouped data:\", groupedData); // Debug log for grouped data\n                    setStudents(Object.values(groupedData)); // Values are now arrays of students\n                } else {\n                    console.error('Fetched data is not an array:', data);\n                    setError('Unexpected data format from server.');\n                }\n            } catch (error) {\n                console.error('Error loading students:', error);\n                setError('Failed to load student data.');\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        loadStudents();\n    }, [filter, year, searchTerm]);\n\n    const handleStudentClick = (student) => {\n        setSelectedStudent(student);\n    };\n\n    const closeModal = () => {\n        setSelectedStudent(null);\n    };\n\n    // Apply filters only if filter is not \"All Students\"\n    const filteredStudents = students\n        .map(group => {\n            // Ensure group is an array before applying filter\n            if (Array.isArray(group)) {\n                return group.filter(student => {\n                    // Apply filters for school, type, and year only if filter is not \"All Students\"\n                    let matches = true;\n\n                    if (filter !== 'All Students') {\n                        // Apply school filter\n                        const matchesSchool = schoolFilter ?\n                            student.School && student.School.toLowerCase().includes(schoolFilter.toLowerCase()) :\n                            true;\n\n                        // Apply type filter\n                        const matchesType = typeFilter ?\n                            student.Type && student.Type.toLowerCase().includes(typeFilter.toLowerCase()) :\n                            true;\n\n                        // Apply year filter\n                        const matchesYear = year ?\n                            student.Year && student.Year === year :\n                            true;\n\n                        matches = matchesSchool && matchesType && matchesYear;\n                    }\n\n                    return matches;\n                });\n            }\n            return []; // If group is not an array, return an empty array\n        })\n        .flat() // Flatten the resulting array of arrays\n        .filter(student => student !== undefined); // Remove undefined values, if any\n\n    console.log(\"Filtered students:\", filteredStudents); // Debug log for filtered students\n\n    if (loading) {\n        return <p > Loading... < /p>;\n    }\n\n    if (error) {\n        return <p className = \"error-message\" > { error } < /p>;\n    }\n\n    return ( <\n        div className = \"student-list\" >\n        <\n        h2 style = {\n            { marginLeft: '20px', fontSize: '30px' } } > Students < /h2> <\n        div className = \"student-cards-container\" > {\n            filteredStudents.length > 0 ? (\n                filteredStudents.map((student) => ( <\n                    div onClick = {\n                        () => handleStudentClick(student) }\n                    key = { student.Reg_No } >\n                    <\n                    StudentCard student = { student }\n                    /> <\n                    /div>\n                ))\n            ) : ( <\n                p > No students found matching this criteria. < /p>\n            )\n        } <\n        /div> {\n            selectedStudent && ( <\n                StudentDetailModal student = { selectedStudent }\n                onClose = { closeModal }\n                />\n            )\n        } <\n        /div>\n    );\n}\n\nexport default StudentList;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}