{"ast":null,"code":"var _jsxFileName = \"/Users/roopakowshika/placement/placement__/frontend/src/components/StudentList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from 'react';\nimport StudentCard from './StudentCard';\nimport StudentDetailModal from './StudentDetailModal';\nimport './StudentList.css';\nimport { fetchStudents } from '../api/studentAPI';\nimport { groupByRegNo } from '../utils/groupByRegNo';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction StudentList({\n  filter,\n  year,\n  searchTerm,\n  schoolFilter,\n  typeFilter\n}) {\n  _s();\n  const [students, setStudents] = useState([]); // Initialize as an empty array\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [selectedStudent, setSelectedStudent] = useState(null);\n  useEffect(() => {\n    const loadStudents = async () => {\n      try {\n        setLoading(true);\n\n        // Fetch students data from API\n        const data = await fetchStudents(filter, year, searchTerm, schoolFilter, typeFilter);\n        console.log('Fetched student data:', data); // Log to verify the data\n\n        if (Array.isArray(data)) {\n          // Apply school filter if 'SCOPE' is selected\n          let filteredData = data;\n          if (schoolFilter === 'SCOPE') {\n            filteredData = data.filter(student => student.School === 'SCOPE');\n          }\n\n          // Group by Reg_No (if necessary)\n          const groupedData = groupByRegNo(filteredData);\n\n          // Make sure to return an array before setting the state\n          setStudents(Object.values(groupedData)); // Ensure it's an array\n        } else {\n          console.error('Fetched data is not an array:', data);\n          setError('Unexpected data format from server.');\n        }\n      } catch (error) {\n        console.error('Error loading students:', error);\n        setError('Failed to load student data.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadStudents();\n  }, [filter, year, searchTerm, schoolFilter, typeFilter]);\n  const handleStudentClick = student => {\n    setSelectedStudent(student);\n  };\n  const closeModal = () => {\n    setSelectedStudent(null);\n  };\n\n  // Memoized rendering of students list to prevent unnecessary re-renders\n  const memoizedStudentList = useMemo(() => students.map(student => /*#__PURE__*/_jsxDEV(StudentCard, {\n    student: student,\n    onClick: () => handleStudentClick(student)\n  }, student.Reg_No, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 37\n  }, this)), [students]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \" Loading students... \"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\" Error: \", error, \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"student-list\",\n      children: [\" \", memoizedStudentList, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this), \" \", selectedStudent && /*#__PURE__*/_jsxDEV(StudentDetailModal, {\n      student: selectedStudent,\n      closeModal: closeModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 34\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 14\n  }, this);\n}\n_s(StudentList, \"8mGb5WLKJ9tCasCL6/JVLch5JrM=\");\n_c = StudentList;\nexport default StudentList;\nvar _c;\n$RefreshReg$(_c, \"StudentList\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","StudentCard","StudentDetailModal","fetchStudents","groupByRegNo","jsxDEV","_jsxDEV","StudentList","filter","year","searchTerm","schoolFilter","typeFilter","_s","students","setStudents","loading","setLoading","error","setError","selectedStudent","setSelectedStudent","loadStudents","data","console","log","Array","isArray","filteredData","student","School","groupedData","Object","values","handleStudentClick","closeModal","memoizedStudentList","map","onClick","Reg_No","fileName","_jsxFileName","lineNumber","columnNumber","children","className","_c","$RefreshReg$"],"sources":["/Users/roopakowshika/placement/placement__/frontend/src/components/StudentList.js"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport StudentCard from './StudentCard';\nimport StudentDetailModal from './StudentDetailModal';\nimport './StudentList.css';\nimport { fetchStudents } from '../api/studentAPI';\nimport { groupByRegNo } from '../utils/groupByRegNo';\n\nfunction StudentList({ filter, year, searchTerm, schoolFilter, typeFilter }) {\n    const [students, setStudents] = useState([]); // Initialize as an empty array\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [selectedStudent, setSelectedStudent] = useState(null);\n\n    useEffect(() => {\n        const loadStudents = async() => {\n            try {\n                setLoading(true);\n\n                // Fetch students data from API\n                const data = await fetchStudents(filter, year, searchTerm, schoolFilter, typeFilter);\n                console.log('Fetched student data:', data); // Log to verify the data\n\n                if (Array.isArray(data)) {\n                    // Apply school filter if 'SCOPE' is selected\n                    let filteredData = data;\n                    if (schoolFilter === 'SCOPE') {\n                        filteredData = data.filter(student => student.School === 'SCOPE');\n                    }\n\n                    // Group by Reg_No (if necessary)\n                    const groupedData = groupByRegNo(filteredData);\n\n                    // Make sure to return an array before setting the state\n                    setStudents(Object.values(groupedData)); // Ensure it's an array\n                } else {\n                    console.error('Fetched data is not an array:', data);\n                    setError('Unexpected data format from server.');\n                }\n            } catch (error) {\n                console.error('Error loading students:', error);\n                setError('Failed to load student data.');\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        loadStudents();\n    }, [filter, year, searchTerm, schoolFilter, typeFilter]);\n\n    const handleStudentClick = (student) => {\n        setSelectedStudent(student);\n    };\n\n    const closeModal = () => {\n        setSelectedStudent(null);\n    };\n\n    // Memoized rendering of students list to prevent unnecessary re-renders\n    const memoizedStudentList = useMemo(() => (\n        students.map((student) => ( <\n            StudentCard key = { student.Reg_No }\n            student = { student }\n            onClick = {\n                () => handleStudentClick(student) }\n            />\n        ))\n    ), [students]);\n\n    if (loading) return <div > Loading students... < /div>;\n\n    if (error) return <div > Error: { error } < /div>;\n\n    return ( <\n        div >\n        <\n        div className = \"student-list\" > { memoizedStudentList } <\n        /div> {\n            selectedStudent && ( <\n                StudentDetailModal student = { selectedStudent }\n                closeModal = { closeModal }\n                />\n            )\n        } <\n        /div>\n    );\n}\n\nexport default StudentList;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}