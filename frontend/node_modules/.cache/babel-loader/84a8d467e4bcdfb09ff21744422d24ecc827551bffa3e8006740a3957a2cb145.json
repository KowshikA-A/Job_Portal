{"ast":null,"code":"var _jsxFileName = \"/Users/roopakowshika/placement/placement__/frontend/src/components/StudentList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport StudentCard from './StudentCard';\nimport StudentDetailModal from './StudentDetailModal';\nimport './StudentList.css';\nimport { fetchStudents } from '../api/studentAPI';\nimport { groupByRegNo } from '../utils/groupByRegNo';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction StudentList({\n  filter,\n  year,\n  searchTerm,\n  schoolFilter,\n  typeFilter\n}) {\n  _s();\n  const [students, setStudents] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [selectedStudent, setSelectedStudent] = useState(null);\n\n  // Helper function to safely handle string toLowerCase conversion\n  const safeToLowerCase = str => str ? str.toLowerCase() : '';\n  useEffect(() => {\n    const loadStudents = async () => {\n      try {\n        setLoading(true);\n        let data = await fetchStudents(filter, year); // Fetch students based on the filter and year\n        console.log('Fetched student data:', data); // Log to verify the data\n\n        if (Array.isArray(data)) {\n          // Apply search term filter if provided\n          if (searchTerm) {\n            data = data.filter(student => safeToLowerCase(student.Reg_No).includes(safeToLowerCase(searchTerm)) || safeToLowerCase(student.Name).includes(safeToLowerCase(searchTerm)));\n          }\n\n          // Apply School filter if provided\n          if (schoolFilter) {\n            data = data.filter(student => safeToLowerCase(student.School).includes(safeToLowerCase(schoolFilter)));\n          }\n\n          // Apply Type filter if provided\n          if (typeFilter) {\n            data = data.filter(student => safeToLowerCase(student.Type).includes(safeToLowerCase(typeFilter)));\n          }\n\n          // Group students by Reg_No after applying all filters\n          const groupedData = groupByRegNo(data);\n          setStudents(groupedData);\n        } else {\n          console.error('Fetched data is not an array:', data);\n          setError('Unexpected data format from server.');\n        }\n      } catch (error) {\n        console.error('Error loading students:', error);\n        setError('Failed to load student data.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadStudents();\n  }, [filter, year, searchTerm, schoolFilter, typeFilter]); // Trigger the effect whenever any of the filters change\n\n  const handleStudentClick = student => {\n    setSelectedStudent(student);\n  };\n  const closeModal = () => {\n    setSelectedStudent(null);\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \" Loading... \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 16\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: [\" \", error, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"student-list\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        marginLeft: '20px',\n        fontSize: '30px'\n      },\n      children: \" Students \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"student-cards-container\",\n      children: [\" \", Object.keys(students).length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" No students found matching this criteria. \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 56\n      }, this) : Object.values(students).map(student => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => handleStudentClick(student),\n        children: [/*#__PURE__*/_jsxDEV(StudentCard, {\n          student: student\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 25\n        }, this), \" \"]\n      }, student.Reg_No, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 64\n      }, this)), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 33\n    }, this), \" \", selectedStudent && /*#__PURE__*/_jsxDEV(StudentDetailModal, {\n      student: selectedStudent,\n      onClose: closeModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 34\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 14\n  }, this);\n}\n_s(StudentList, \"yyozlw0A1m59L6xhmf2OcIuQ8pE=\");\n_c = StudentList;\nexport default StudentList;\nvar _c;\n$RefreshReg$(_c, \"StudentList\");","map":{"version":3,"names":["React","useState","useEffect","StudentCard","StudentDetailModal","fetchStudents","groupByRegNo","jsxDEV","_jsxDEV","StudentList","filter","year","searchTerm","schoolFilter","typeFilter","_s","students","setStudents","loading","setLoading","error","setError","selectedStudent","setSelectedStudent","safeToLowerCase","str","toLowerCase","loadStudents","data","console","log","Array","isArray","student","Reg_No","includes","Name","School","Type","groupedData","handleStudentClick","closeModal","children","fileName","_jsxFileName","lineNumber","columnNumber","className","style","marginLeft","fontSize","Object","keys","length","values","map","onClick","onClose","_c","$RefreshReg$"],"sources":["/Users/roopakowshika/placement/placement__/frontend/src/components/StudentList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport StudentCard from './StudentCard';\nimport StudentDetailModal from './StudentDetailModal';\nimport './StudentList.css';\nimport { fetchStudents } from '../api/studentAPI';\nimport { groupByRegNo } from '../utils/groupByRegNo';\n\nfunction StudentList({ filter, year, searchTerm, schoolFilter, typeFilter }) {\n    const [students, setStudents] = useState({});\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [selectedStudent, setSelectedStudent] = useState(null);\n\n    // Helper function to safely handle string toLowerCase conversion\n    const safeToLowerCase = (str) => (str ? str.toLowerCase() : '');\n\n    useEffect(() => {\n        const loadStudents = async() => {\n            try {\n                setLoading(true);\n                let data = await fetchStudents(filter, year); // Fetch students based on the filter and year\n                console.log('Fetched student data:', data); // Log to verify the data\n\n                if (Array.isArray(data)) {\n                    // Apply search term filter if provided\n                    if (searchTerm) {\n                        data = data.filter(student =>\n                            safeToLowerCase(student.Reg_No).includes(safeToLowerCase(searchTerm)) ||\n                            safeToLowerCase(student.Name).includes(safeToLowerCase(searchTerm))\n                        );\n                    }\n\n                    // Apply School filter if provided\n                    if (schoolFilter) {\n                        data = data.filter(student =>\n                            safeToLowerCase(student.School).includes(safeToLowerCase(schoolFilter))\n                        );\n                    }\n\n                    // Apply Type filter if provided\n                    if (typeFilter) {\n                        data = data.filter(student =>\n                            safeToLowerCase(student.Type).includes(safeToLowerCase(typeFilter))\n                        );\n                    }\n\n                    // Group students by Reg_No after applying all filters\n                    const groupedData = groupByRegNo(data);\n                    setStudents(groupedData);\n                } else {\n                    console.error('Fetched data is not an array:', data);\n                    setError('Unexpected data format from server.');\n                }\n            } catch (error) {\n                console.error('Error loading students:', error);\n                setError('Failed to load student data.');\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        loadStudents();\n    }, [filter, year, searchTerm, schoolFilter, typeFilter]); // Trigger the effect whenever any of the filters change\n\n    const handleStudentClick = (student) => {\n        setSelectedStudent(student);\n    };\n\n    const closeModal = () => {\n        setSelectedStudent(null);\n    };\n\n    if (loading) {\n        return <p > Loading... < /p>;\n    }\n\n    if (error) {\n        return <p className = \"error-message\" > { error } < /p>;\n    }\n\n    return ( <\n            div className = \"student-list\" >\n            <\n            h2 style = {\n                { marginLeft: '20px', fontSize: '30px' }\n            } > Students < /h2> <\n            div className = \"student-cards-container\" > {\n                Object.keys(students).length === 0 ? ( <\n                    p > No students found matching this criteria. < /p>\n                ) : (\n                    Object.values(students).map((student) => ( <\n                        div key = { student.Reg_No }\n                        onClick = {\n                            () => handleStudentClick(student)\n                        } >\n                        <\n                        StudentCard student = { student }\n                        /> < /\n                        div >\n                    ))\n                )\n            } <\n            /div> {\n            selectedStudent && ( <\n                StudentDetailModal student = { selectedStudent }\n                onClose = { closeModal }\n                />\n            )\n        } <\n        /div>\n);\n}\n\nexport default StudentList;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,kBAAkB,MAAM,sBAAsB;AACrD,OAAO,mBAAmB;AAC1B,SAASC,aAAa,QAAQ,mBAAmB;AACjD,SAASC,YAAY,QAAQ,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErD,SAASC,WAAWA,CAAC;EAAEC,MAAM;EAAEC,IAAI;EAAEC,UAAU;EAAEC,YAAY;EAAEC;AAAW,CAAC,EAAE;EAAAC,EAAA;EACzE,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC5C,MAAM,CAACiB,OAAO,EAAEC,UAAU,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACmB,KAAK,EAAEC,QAAQ,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACqB,eAAe,EAAEC,kBAAkB,CAAC,GAAGtB,QAAQ,CAAC,IAAI,CAAC;;EAE5D;EACA,MAAMuB,eAAe,GAAIC,GAAG,IAAMA,GAAG,GAAGA,GAAG,CAACC,WAAW,CAAC,CAAC,GAAG,EAAG;EAE/DxB,SAAS,CAAC,MAAM;IACZ,MAAMyB,YAAY,GAAG,MAAAA,CAAA,KAAW;MAC5B,IAAI;QACAR,UAAU,CAAC,IAAI,CAAC;QAChB,IAAIS,IAAI,GAAG,MAAMvB,aAAa,CAACK,MAAM,EAAEC,IAAI,CAAC,CAAC,CAAC;QAC9CkB,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEF,IAAI,CAAC,CAAC,CAAC;;QAE5C,IAAIG,KAAK,CAACC,OAAO,CAACJ,IAAI,CAAC,EAAE;UACrB;UACA,IAAIhB,UAAU,EAAE;YACZgB,IAAI,GAAGA,IAAI,CAAClB,MAAM,CAACuB,OAAO,IACtBT,eAAe,CAACS,OAAO,CAACC,MAAM,CAAC,CAACC,QAAQ,CAACX,eAAe,CAACZ,UAAU,CAAC,CAAC,IACrEY,eAAe,CAACS,OAAO,CAACG,IAAI,CAAC,CAACD,QAAQ,CAACX,eAAe,CAACZ,UAAU,CAAC,CACtE,CAAC;UACL;;UAEA;UACA,IAAIC,YAAY,EAAE;YACde,IAAI,GAAGA,IAAI,CAAClB,MAAM,CAACuB,OAAO,IACtBT,eAAe,CAACS,OAAO,CAACI,MAAM,CAAC,CAACF,QAAQ,CAACX,eAAe,CAACX,YAAY,CAAC,CAC1E,CAAC;UACL;;UAEA;UACA,IAAIC,UAAU,EAAE;YACZc,IAAI,GAAGA,IAAI,CAAClB,MAAM,CAACuB,OAAO,IACtBT,eAAe,CAACS,OAAO,CAACK,IAAI,CAAC,CAACH,QAAQ,CAACX,eAAe,CAACV,UAAU,CAAC,CACtE,CAAC;UACL;;UAEA;UACA,MAAMyB,WAAW,GAAGjC,YAAY,CAACsB,IAAI,CAAC;UACtCX,WAAW,CAACsB,WAAW,CAAC;QAC5B,CAAC,MAAM;UACHV,OAAO,CAACT,KAAK,CAAC,+BAA+B,EAAEQ,IAAI,CAAC;UACpDP,QAAQ,CAAC,qCAAqC,CAAC;QACnD;MACJ,CAAC,CAAC,OAAOD,KAAK,EAAE;QACZS,OAAO,CAACT,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;QAC/CC,QAAQ,CAAC,8BAA8B,CAAC;MAC5C,CAAC,SAAS;QACNF,UAAU,CAAC,KAAK,CAAC;MACrB;IACJ,CAAC;IAEDQ,YAAY,CAAC,CAAC;EAClB,CAAC,EAAE,CAACjB,MAAM,EAAEC,IAAI,EAAEC,UAAU,EAAEC,YAAY,EAAEC,UAAU,CAAC,CAAC,CAAC,CAAC;;EAE1D,MAAM0B,kBAAkB,GAAIP,OAAO,IAAK;IACpCV,kBAAkB,CAACU,OAAO,CAAC;EAC/B,CAAC;EAED,MAAMQ,UAAU,GAAGA,CAAA,KAAM;IACrBlB,kBAAkB,CAAC,IAAI,CAAC;EAC5B,CAAC;EAED,IAAIL,OAAO,EAAE;IACT,oBAAOV,OAAA;MAAAkC,QAAA,EAAI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAChC;EAEA,IAAI1B,KAAK,EAAE;IACP,oBAAOZ,OAAA;MAAGuC,SAAS,EAAG,eAAe;MAAAL,QAAA,GAAE,GAAC,EAAEtB,KAAK,EAAE,GAAC;IAAA;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAC3D;EAEA,oBAAStC,OAAA;IACGuC,SAAS,EAAG,cAAc;IAAAL,QAAA,gBAC9BlC,OAAA;MACGwC,KAAK,EACJ;QAAEC,UAAU,EAAE,MAAM;QAAEC,QAAQ,EAAE;MAAO,CAC1C;MAAAR,QAAA,EAAE;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,KAAC,eAAAtC,OAAA;MAChBuC,SAAS,EAAG,yBAAyB;MAAAL,QAAA,GAAE,GAAC,EACxCS,MAAM,CAACC,IAAI,CAACpC,QAAQ,CAAC,CAACqC,MAAM,KAAK,CAAC,gBAAK7C,OAAA;QAAAkC,QAAA,EAChC;MAA2C;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,GAEnDK,MAAM,CAACG,MAAM,CAACtC,QAAQ,CAAC,CAACuC,GAAG,CAAEtB,OAAO,iBAAOzB,OAAA;QAEvCgD,OAAO,EACHA,CAAA,KAAMhB,kBAAkB,CAACP,OAAO,CACnC;QAAAS,QAAA,gBACDlC,OAAA,CACAL,WAAW;UAAC8B,OAAO,EAAKA;QAAS;UAAAU,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChC,CAAC,KAAC;MAAA,GANSb,OAAO,CAACC,MAAM;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAOtB,CACP,CACJ,EACJ,GAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,KAAC,EACNxB,eAAe,iBAAMd,OAAA,CACjBJ,kBAAkB;MAAC6B,OAAO,EAAKX,eAAiB;MAChDmC,OAAO,EAAKhB;IAAY;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvB,CACJ,EACJ,GAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEb;AAAC/B,EAAA,CAxGQN,WAAW;AAAAiD,EAAA,GAAXjD,WAAW;AA0GpB,eAAeA,WAAW;AAAC,IAAAiD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}