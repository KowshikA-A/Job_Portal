{"ast":null,"code":"var _jsxFileName = \"/Users/roopakowshika/placement/placement__/frontend/src/components/CompanyPlacementsChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Pie } from 'react-chartjs-2';\nimport axios from 'axios';\nimport PropTypes from 'prop-types';\nimport { Chart as ChartJS, Title, Tooltip, Legend, ArcElement } from 'chart.js';\nimport './CompanyPlacementsChart.css'; // Import the CSS file\n\n// Register necessary Chart.js components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(Title, Tooltip, Legend, ArcElement);\n\n// Function to generate a color based on an index\nfunction generateColor(index) {\n  const hue = index * 360 / 20; // Generate hue based on the index\n  return `hsl(${hue}, 95%, 50%)`; // HSL color with full saturation and medium lightness\n}\nfunction CompanyPlacementsChart({\n  year\n}) {\n  _s();\n  const [chartData, setChartData] = useState({\n    labels: [],\n    datasets: []\n  });\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [noData, setNoData] = useState(false);\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      setError(null);\n      setNoData(false);\n      try {\n        const response = await axios.get('/api/placements/chart-data', {\n          params: {\n            year\n          }\n        });\n        const {\n          labels,\n          values\n        } = response.data;\n        if (labels.length === 0) {\n          setNoData(true);\n        } else {\n          setChartData({\n            labels,\n            datasets: [{\n              label: 'Number of Placements',\n              data: values,\n              backgroundColor: labels.map((_, index) => generateColor(index)),\n              borderColor: labels.map((_, index) => generateColor(index)),\n              borderWidth: 1\n            }]\n          });\n        }\n      } catch (error) {\n        setError('Error loading chart data: ' + error.message);\n        console.error('Error loading chart data:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    if (year) {\n      fetchData();\n    }\n  }, [year]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chart-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"chart-header\",\n      children: [\" Company wise Placements in \", year || 'All Years', \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"one\",\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        className: \"red-text\",\n        children: \"Discription:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), \" It displays the count of placed and not placed students for each year. When hovering over the lines in the graphs for a specific year, it will show the count of students along with the percentage of students. \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 99\n    }, this), \" \", loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \" Loading... \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 25\n    }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\" \", error, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 27\n    }, this) : noData ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"message\",\n      children: \" No data was found for the selected year. \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 28\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '100%',\n        height: '300px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Pie, {\n        data: chartData,\n        options: {\n          plugins: {\n            tooltip: {\n              callbacks: {\n                label: function (tooltipItem) {\n                  const dataIndex = tooltipItem.dataIndex;\n                  const value = chartData.datasets[0].data[dataIndex];\n                  const total = chartData.datasets[0].data.reduce((acc, curr) => acc + curr, 0);\n                  const percentage = (value / total * 100).toFixed(2);\n                  return `${chartData.labels[dataIndex]}: ${value} (${percentage}%)`;\n                }\n              }\n            },\n            legend: {\n              labels: {\n                color: '#000' // Change legend label color to black (adjust as needed)\n              }\n            }\n          },\n          responsive: true,\n          maintainAspectRatio: false\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 19\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 14\n  }, this);\n}\n_s(CompanyPlacementsChart, \"JEmHTiWmD7/cvxHKX4mawJUX1Oo=\");\n_c = CompanyPlacementsChart;\nCompanyPlacementsChart.propTypes = {\n  year: PropTypes.number.isRequired // Ensure the year prop is a number\n};\nexport default CompanyPlacementsChart;\nvar _c;\n$RefreshReg$(_c, \"CompanyPlacementsChart\");","map":{"version":3,"names":["React","useEffect","useState","Pie","axios","PropTypes","Chart","ChartJS","Title","Tooltip","Legend","ArcElement","jsxDEV","_jsxDEV","register","generateColor","index","hue","CompanyPlacementsChart","year","_s","chartData","setChartData","labels","datasets","loading","setLoading","error","setError","noData","setNoData","fetchData","response","get","params","values","data","length","label","backgroundColor","map","_","borderColor","borderWidth","message","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","width","height","options","plugins","tooltip","callbacks","tooltipItem","dataIndex","value","total","reduce","acc","curr","percentage","toFixed","legend","color","responsive","maintainAspectRatio","_c","propTypes","number","isRequired","$RefreshReg$"],"sources":["/Users/roopakowshika/placement/placement__/frontend/src/components/CompanyPlacementsChart.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Pie } from 'react-chartjs-2';\nimport axios from 'axios';\nimport PropTypes from 'prop-types';\nimport { Chart as ChartJS, Title, Tooltip, Legend, ArcElement } from 'chart.js';\nimport './CompanyPlacementsChart.css'; // Import the CSS file\n\n// Register necessary Chart.js components\nChartJS.register(Title, Tooltip, Legend, ArcElement);\n\n// Function to generate a color based on an index\nfunction generateColor(index) {\n    const hue = index * 360 / 20; // Generate hue based on the index\n    return `hsl(${hue}, 95%, 50%)`; // HSL color with full saturation and medium lightness\n}\n\nfunction CompanyPlacementsChart({ year }) {\n    const [chartData, setChartData] = useState({ labels: [], datasets: [] });\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [noData, setNoData] = useState(false);\n\n    useEffect(() => {\n        const fetchData = async() => {\n            setLoading(true);\n            setError(null);\n            setNoData(false);\n            try {\n                const response = await axios.get('/api/placements/chart-data', {\n                    params: { year }\n                });\n\n                const { labels, values } = response.data;\n\n                if (labels.length === 0) {\n                    setNoData(true);\n                } else {\n                    setChartData({\n                        labels,\n                        datasets: [{\n                            label: 'Number of Placements',\n                            data: values,\n                            backgroundColor: labels.map((_, index) => generateColor(index)),\n                            borderColor: labels.map((_, index) => generateColor(index)),\n                            borderWidth: 1,\n                        }],\n                    });\n                }\n            } catch (error) {\n                setError('Error loading chart data: ' + error.message);\n                console.error('Error loading chart data:', error);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        if (year) {\n            fetchData();\n        }\n    }, [year]);\n\n    return ( <\n        div className = \"chart-container\" >\n        <\n        h2 className = \"chart-header\" > Company wise Placements in { year || 'All Years' } < /h2> <\n        p className = \"one\" >\n        <\n        strong className = \"red-text\" >\n        Discription:\n        <\n        /strong> It displays the count of placed and not placed students for each year. When hovering over the lines in the graphs for a specific year, it will show the count of students along with the percentage of students. < /\n        p > {\n            loading ? ( <\n                p > Loading... < /p>\n            ) : error ? ( <\n                p > { error } < /p>\n            ) : noData ? ( <\n                p className = \"message\" > No data was found\n                for the selected year. < /p>\n            ) : ( <\n                div style = {\n                    { width: '100%', height: '300px' }\n                } >\n                <\n                Pie data = { chartData }\n                options = {\n                    {\n                        plugins: {\n                            tooltip: {\n                                callbacks: {\n                                    label: function(tooltipItem) {\n                                        const dataIndex = tooltipItem.dataIndex;\n                                        const value = chartData.datasets[0].data[dataIndex];\n                                        const total = chartData.datasets[0].data.reduce((acc, curr) => acc + curr, 0);\n                                        const percentage = ((value / total) * 100).toFixed(2);\n                                        return `${chartData.labels[dataIndex]}: ${value} (${percentage}%)`;\n                                    }\n                                }\n                            },\n                            legend: {\n                                labels: {\n                                    color: '#000' // Change legend label color to black (adjust as needed)\n                                }\n                            }\n                        },\n                        responsive: true,\n                        maintainAspectRatio: false\n                    }\n                }\n                /> < /\n                div >\n            )\n        } <\n        /div>\n    );\n}\n\nCompanyPlacementsChart.propTypes = {\n    year: PropTypes.number.isRequired, // Ensure the year prop is a number\n};\n\nexport default CompanyPlacementsChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}