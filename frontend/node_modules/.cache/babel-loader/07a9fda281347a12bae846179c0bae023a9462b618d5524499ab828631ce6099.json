{"ast":null,"code":"import React,{useEffect,useState}from'react';import{Line}from'react-chartjs-2';import axios from'axios';import{Chart as ChartJS,CategoryScale,LinearScale,PointElement,LineElement,Title,Tooltip,Legend}from'chart.js';// Register necessary components with Chart.js\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";ChartJS.register(CategoryScale,LinearScale,PointElement,LineElement,Title,Tooltip,Legend);const YearlyStudentStatusChart=()=>{const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const[allStats,setAllStats]=useState([]);// Full data fetched from the API\nuseEffect(()=>{const fetchData=async()=>{try{setLoading(true);const response=await axios.get('http://localhost:1000/api/stats');const stats=response.data;// Check if stats is an array\nif(!Array.isArray(stats)){throw new Error('Unexpected data format');}setAllStats(stats);// Store the full dataset\nsetLoading(false);}catch(error){console.error('Error fetching data:',error);setError(error.message||'Error fetching data');setLoading(false);}};fetchData();},[]);// Sort allStats by year in ascending order\nconst sortedStats=allStats.sort((a,b)=>a.year-b.year);// Prepare data for chart based on sorted stats\nconst yearsForChart=sortedStats.map(item=>item.year);const placedCounts=sortedStats.map(item=>item.placed);const notPlacedCounts=sortedStats.map(item=>item.notPlaced);const chartDataForDisplay={labels:yearsForChart,// Show all years in ascending order\ndatasets:[{label:'Placed Students',data:placedCounts,borderColor:'rgba(75,192,192,1)',backgroundColor:'rgba(75,192,192,0.2)',borderWidth:1},{label:'Not Placed Students',data:notPlacedCounts,borderColor:'rgba(255,99,132,1)',backgroundColor:'rgba(255,99,132,0.2)',borderWidth:1}]};if(loading){return/*#__PURE__*/_jsx(\"p\",{children:\" Loading chart data... \"});}if(error){return/*#__PURE__*/_jsxs(\"p\",{children:[\" Error: \",error,\" \"]});}return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\" Placement Analysis \"}),\" \",chartDataForDisplay.labels.length>0?/*#__PURE__*/_jsx(Line,{data:chartDataForDisplay,options:{responsive:true,plugins:{legend:{position:'top'},tooltip:{callbacks:{label:function(context){const dataset=context.dataset;const index=context.dataIndex;// Get the placed and not placed values\nconst placedCount=chartDataForDisplay.datasets[0].data[index];const notPlacedCount=chartDataForDisplay.datasets[1].data[index];// Calculate the total and percentages\nconst total=placedCount+notPlacedCount;const placedPercentage=total>0?(placedCount/total*100).toFixed(2):0;const notPlacedPercentage=total>0?(notPlacedCount/total*100).toFixed(2):0;// Construct the label with count and percentage\nif(dataset.label==='Placed Students'){return`${dataset.label}: ${placedCount} (${placedPercentage}%)`;}else if(dataset.label==='Not Placed Students'){return`${dataset.label}: ${notPlacedCount} (${notPlacedPercentage}%)`;}}}}},scales:{x:{title:{display:true,text:'Year'// X-axis label\n},type:'category',ticks:{autoSkip:false// Show all year labels\n}},y:{title:{display:true,text:'Number of Students'// Y-axis label\n}}}}}):/*#__PURE__*/_jsx(\"p\",{children:\" No data available \"}),\" \"]});};export default YearlyStudentStatusChart;","map":{"version":3,"names":["React","useEffect","useState","Line","axios","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","jsx","_jsx","jsxs","_jsxs","register","YearlyStudentStatusChart","loading","setLoading","error","setError","allStats","setAllStats","fetchData","response","get","stats","data","Array","isArray","Error","console","message","sortedStats","sort","a","b","year","yearsForChart","map","item","placedCounts","placed","notPlacedCounts","notPlaced","chartDataForDisplay","labels","datasets","label","borderColor","backgroundColor","borderWidth","children","length","options","responsive","plugins","legend","position","tooltip","callbacks","context","dataset","index","dataIndex","placedCount","notPlacedCount","total","placedPercentage","toFixed","notPlacedPercentage","scales","x","title","display","text","type","ticks","autoSkip","y"],"sources":["/Users/roopakowshika/placement/placementfrontend/frontend/src/components/YearlyPlacedStudentsChart.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport axios from 'axios';\nimport {\n    Chart as ChartJS,\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend,\n} from 'chart.js';\n\n// Register necessary components with Chart.js\nChartJS.register(\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend\n);\n\nconst YearlyStudentStatusChart = () => {\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [allStats, setAllStats] = useState([]); // Full data fetched from the API\n\n    useEffect(() => {\n        const fetchData = async() => {\n            try {\n                setLoading(true);\n                const response = await axios.get('http://localhost:1000/api/stats');\n                const stats = response.data;\n\n                // Check if stats is an array\n                if (!Array.isArray(stats)) {\n                    throw new Error('Unexpected data format');\n                }\n\n                setAllStats(stats); // Store the full dataset\n                setLoading(false);\n            } catch (error) {\n                console.error('Error fetching data:', error);\n                setError(error.message || 'Error fetching data');\n                setLoading(false);\n            }\n        };\n\n        fetchData();\n    }, []);\n\n    // Sort allStats by year in ascending order\n    const sortedStats = allStats.sort((a, b) => a.year - b.year);\n\n    // Prepare data for chart based on sorted stats\n    const yearsForChart = sortedStats.map(item => item.year);\n    const placedCounts = sortedStats.map(item => item.placed);\n    const notPlacedCounts = sortedStats.map(item => item.notPlaced);\n\n    const chartDataForDisplay = {\n        labels: yearsForChart, // Show all years in ascending order\n        datasets: [{\n                label: 'Placed Students',\n                data: placedCounts,\n                borderColor: 'rgba(75,192,192,1)',\n                backgroundColor: 'rgba(75,192,192,0.2)',\n                borderWidth: 1,\n            },\n            {\n                label: 'Not Placed Students',\n                data: notPlacedCounts,\n                borderColor: 'rgba(255,99,132,1)',\n                backgroundColor: 'rgba(255,99,132,0.2)',\n                borderWidth: 1,\n            },\n        ],\n    };\n\n    if (loading) {\n        return <p > Loading chart data... < /p>;\n    }\n\n    if (error) {\n        return <p > Error: { error } < /p>;\n    }\n\n    return ( <\n        div >\n        <\n        h2 > Placement Analysis < /h2>\n\n        { /* Render chart */ } {\n            chartDataForDisplay.labels.length > 0 ? ( <\n                Line data = { chartDataForDisplay }\n                options = {\n                    {\n                        responsive: true,\n                        plugins: {\n                            legend: {\n                                position: 'top',\n                            },\n                            tooltip: {\n                                callbacks: {\n                                    label: function(context) {\n                                        const dataset = context.dataset;\n                                        const index = context.dataIndex;\n\n                                        // Get the placed and not placed values\n                                        const placedCount = chartDataForDisplay.datasets[0].data[index];\n                                        const notPlacedCount = chartDataForDisplay.datasets[1].data[index];\n\n                                        // Calculate the total and percentages\n                                        const total = placedCount + notPlacedCount;\n                                        const placedPercentage = total > 0 ? ((placedCount / total) * 100).toFixed(2) : 0;\n                                        const notPlacedPercentage = total > 0 ? ((notPlacedCount / total) * 100).toFixed(2) : 0;\n\n                                        // Construct the label with count and percentage\n                                        if (dataset.label === 'Placed Students') {\n                                            return `${dataset.label}: ${placedCount} (${placedPercentage}%)`;\n                                        } else if (dataset.label === 'Not Placed Students') {\n                                            return `${dataset.label}: ${notPlacedCount} (${notPlacedPercentage}%)`;\n                                        }\n                                    },\n                                },\n                            },\n                        },\n                        scales: {\n                            x: {\n                                title: {\n                                    display: true,\n                                    text: 'Year', // X-axis label\n                                },\n                                type: 'category',\n                                ticks: {\n                                    autoSkip: false, // Show all year labels\n                                },\n                            },\n                            y: {\n                                title: {\n                                    display: true,\n                                    text: 'Number of Students', // Y-axis label\n                                },\n                            },\n                        },\n                    }\n                }\n                />\n            ) : ( <\n                p > No data available < /p>\n            )\n        } <\n        /div>\n    );\n};\n\nexport default YearlyStudentStatusChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}