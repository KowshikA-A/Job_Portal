{"ast":null,"code":"var _jsxFileName = \"/Users/roopakowshika/placement/placement__/frontend/src/components/UploadPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport * as XLSX from 'xlsx'; // For .xlsx to .csv conversion\nimport './UploadPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UploadPage = () => {\n  _s();\n  const [uploadStatus, setUploadStatus] = useState('');\n  const [statusType, setStatusType] = useState(''); // 'success' or 'error'\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [recentUploads, setRecentUploads] = useState([]); // Initialize as an empty array\n\n  // Handle file selection\n  const handleFileChange = e => {\n    setSelectedFile(e.target.files[0]);\n    setUploadStatus('');\n    setStatusType('');\n  };\n\n  // Handle file upload with format conversion\n  const handleFileUpload = async () => {\n    if (!selectedFile) {\n      setStatusType('error');\n      setUploadStatus('Please select a file to upload');\n      return;\n    }\n    const fileExtension = selectedFile.name.split('.').pop().toLowerCase();\n    let convertedFile;\n    if (fileExtension === 'csv' || fileExtension === 'json') {\n      convertedFile = selectedFile; // No conversion needed for CSV/JSON\n    } else if (fileExtension === 'xlsx') {\n      convertedFile = await convertExcelToCSV(selectedFile);\n    } else {\n      setStatusType('error');\n      setUploadStatus('Unsupported file format. Please upload a .csv, .json, or .xlsx file.');\n      return;\n    }\n    try {\n      const formData = new FormData();\n      formData.append('file', convertedFile);\n      const response = await axios.post('/api/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      setStatusType('success');\n      setUploadStatus(response.data.message || 'File uploaded successfully');\n      setSelectedFile(null);\n      fetchRecentUploads(); // Fetch recent uploads again after successful upload\n    } catch (error) {\n      console.error('Upload error:', error);\n      setStatusType('error');\n      setUploadStatus('Error uploading file');\n    }\n  };\n\n  // Convert Excel (.xlsx) to CSV\n  const convertExcelToCSV = file => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = e => {\n        const data = e.target.result;\n        const workbook = XLSX.read(data, {\n          type: 'binary'\n        });\n        const sheetName = workbook.SheetNames[0]; // Assuming data is in the first sheet\n        const worksheet = workbook.Sheets[sheetName];\n        const csv = XLSX.utils.sheet_to_csv(worksheet);\n        const blob = new Blob([csv], {\n          type: 'text/csv'\n        });\n        const newFile = new File([blob], file.name.replace('.xlsx', '.csv'), {\n          type: 'text/csv'\n        });\n        resolve(newFile);\n      };\n      reader.onerror = error => reject(error);\n      reader.readAsBinaryString(file);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"upload-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" File Upload \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileChange,\n      accept: \".csv,.json,.xlsx\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 33\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"upload-button\",\n      onClick: handleFileUpload,\n      disabled: !selectedFile,\n      children: \"Upload \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this), uploadStatus && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: statusType === 'success' ? 'success-message' : 'error-message',\n      children: [\" \", uploadStatus, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 31\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \" Recent Uploads \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 42\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [\" \", recentUploads.map(upload => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [\" \", upload.filename, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 17\n        }, this), \" - \", new Date(upload.date).toLocaleDateString(), \" \"]\n      }, upload.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 45\n      }, this)), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 36\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 14\n  }, this);\n};\n_s(UploadPage, \"+xkfRBxNzgwClb2I/rDh+6gJmEs=\");\n_c = UploadPage;\nexport default UploadPage;\nvar _c;\n$RefreshReg$(_c, \"UploadPage\");","map":{"version":3,"names":["React","useState","useEffect","axios","XLSX","jsxDEV","_jsxDEV","UploadPage","_s","uploadStatus","setUploadStatus","statusType","setStatusType","selectedFile","setSelectedFile","recentUploads","setRecentUploads","handleFileChange","e","target","files","handleFileUpload","fileExtension","name","split","pop","toLowerCase","convertedFile","convertExcelToCSV","formData","FormData","append","response","post","headers","data","message","fetchRecentUploads","error","console","file","Promise","resolve","reject","reader","FileReader","onload","result","workbook","read","type","sheetName","SheetNames","worksheet","Sheets","csv","utils","sheet_to_csv","blob","Blob","newFile","File","replace","onerror","readAsBinaryString","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","accept","onClick","disabled","map","upload","filename","Date","date","toLocaleDateString","id","_c","$RefreshReg$"],"sources":["/Users/roopakowshika/placement/placement__/frontend/src/components/UploadPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport * as XLSX from 'xlsx'; // For .xlsx to .csv conversion\nimport './UploadPage.css';\n\nconst UploadPage = () => {\n    const [uploadStatus, setUploadStatus] = useState('');\n    const [statusType, setStatusType] = useState(''); // 'success' or 'error'\n    const [selectedFile, setSelectedFile] = useState(null);\n    const [recentUploads, setRecentUploads] = useState([]); // Initialize as an empty array\n\n    // Handle file selection\n    const handleFileChange = (e) => {\n        setSelectedFile(e.target.files[0]);\n        setUploadStatus('');\n        setStatusType('');\n    };\n\n    // Handle file upload with format conversion\n    const handleFileUpload = async() => {\n        if (!selectedFile) {\n            setStatusType('error');\n            setUploadStatus('Please select a file to upload');\n            return;\n        }\n\n        const fileExtension = selectedFile.name.split('.').pop().toLowerCase();\n\n        let convertedFile;\n        if (fileExtension === 'csv' || fileExtension === 'json') {\n            convertedFile = selectedFile; // No conversion needed for CSV/JSON\n        } else if (fileExtension === 'xlsx') {\n            convertedFile = await convertExcelToCSV(selectedFile);\n        } else {\n            setStatusType('error');\n            setUploadStatus('Unsupported file format. Please upload a .csv, .json, or .xlsx file.');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append('file', convertedFile);\n\n            const response = await axios.post('/api/upload', formData, {\n                headers: {\n                    'Content-Type': 'multipart/form-data',\n                },\n            });\n\n            setStatusType('success');\n            setUploadStatus(response.data.message || 'File uploaded successfully');\n            setSelectedFile(null);\n            fetchRecentUploads(); // Fetch recent uploads again after successful upload\n        } catch (error) {\n            console.error('Upload error:', error);\n            setStatusType('error');\n            setUploadStatus('Error uploading file');\n        }\n    };\n\n    // Convert Excel (.xlsx) to CSV\n    const convertExcelToCSV = (file) => {\n        return new Promise((resolve, reject) => {\n            const reader = new FileReader();\n            reader.onload = (e) => {\n                const data = e.target.result;\n                const workbook = XLSX.read(data, { type: 'binary' });\n                const sheetName = workbook.SheetNames[0]; // Assuming data is in the first sheet\n                const worksheet = workbook.Sheets[sheetName];\n                const csv = XLSX.utils.sheet_to_csv(worksheet);\n                const blob = new Blob([csv], { type: 'text/csv' });\n                const newFile = new File([blob], file.name.replace('.xlsx', '.csv'), { type: 'text/csv' });\n                resolve(newFile);\n            };\n            reader.onerror = (error) => reject(error);\n            reader.readAsBinaryString(file);\n        });\n    };\n\n    return ( <\n        div className = \"upload-container\" >\n        <\n        h1 > File Upload < /h1> <\n        input type = \"file\"\n        onChange = { handleFileChange }\n        accept = \".csv,.json,.xlsx\" / >\n        <\n        button className = \"upload-button\"\n        onClick = { handleFileUpload }\n        disabled = {!selectedFile } >\n        Upload <\n        /button>\n\n        {\n            uploadStatus && ( <\n                p className = { statusType === 'success' ? 'success-message' : 'error-message' } > { uploadStatus } <\n                /p>\n            )\n        }\n\n        { /* Recent Uploads Section */ } <\n        h2 > Recent Uploads < /h2> <\n        ul > {\n            recentUploads.map((upload) => ( <\n                li key = { upload.id } >\n                <\n                strong > { upload.filename } < /strong> - {new Date(upload.date).toLocaleDateString()} <\n                /li>\n            ))\n        } <\n        /ul> <\n        /div>\n    );\n};\n\nexport default UploadPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}