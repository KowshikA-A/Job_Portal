{"ast":null,"code":"var _jsxFileName = \"/Users/roopakowshika/placement/placement__/frontend/src/components/Stats.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport './Stats.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Stats = () => {\n  _s();\n  const [error, setError] = useState(null);\n  const dataRef = useRef(null); // Ref to store the data persistently\n\n  useEffect(() => {\n    const fetchData = async () => {\n      if (dataRef.current) return; // If data is already fetched, don't fetch again\n\n      try {\n        const response = await fetch('http://localhost:1000/api/stats');\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const jsonData = await response.json();\n        dataRef.current = jsonData; // Store data in ref\n      } catch (error) {\n        setError(error.message);\n      }\n    };\n    fetchData();\n  }, []); // Empty dependency array to fetch data once on mount\n\n  const data = dataRef.current; // Access the fetched data\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stats-container\",\n    children: [\" \", error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: [\" Error fetching data: \", error, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 22\n    }, this), \" \", data && data.length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"description\",\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          className: \"red-text\",\n          children: \" Description: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 17\n        }, this), \"It displays the count of total students, count of placed and not placed students in each year. \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this), \" \", data.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stats-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"year\",\n          children: [\" \", item.year, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 25\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"total-students\",\n          children: [\" Total Students: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\" \", item.total, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 74\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 70\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"placed\",\n          children: [\" Placed: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\" \", item.placed, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 58\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"not-placed\",\n          children: [\" Not Placed: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\" \", item.notPlaced, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 66\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 49\n      }, this)), \" \"]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \" No data available \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 19\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 14\n  }, this);\n};\n_s(Stats, \"qLgHrGvGTfCliezqknrzFPmCIuM=\");\n_c = Stats;\nexport default Stats;\nvar _c;\n$RefreshReg$(_c, \"Stats\");","map":{"version":3,"names":["React","useEffect","useState","useRef","jsxDEV","_jsxDEV","Fragment","_Fragment","Stats","_s","error","setError","dataRef","fetchData","current","response","fetch","ok","Error","jsonData","json","message","data","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","item","index","year","total","placed","notPlaced","_c","$RefreshReg$"],"sources":["/Users/roopakowshika/placement/placement__/frontend/src/components/Stats.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport './Stats.css';\n\nconst Stats = () => {\n    const [error, setError] = useState(null);\n    const dataRef = useRef(null); // Ref to store the data persistently\n\n    useEffect(() => {\n        const fetchData = async() => {\n            if (dataRef.current) return; // If data is already fetched, don't fetch again\n\n            try {\n                const response = await fetch('http://localhost:1000/api/stats');\n                if (!response.ok) {\n                    throw new Error('Network response was not ok');\n                }\n                const jsonData = await response.json();\n                dataRef.current = jsonData; // Store data in ref\n            } catch (error) {\n                setError(error.message);\n            }\n        };\n\n        fetchData();\n    }, []); // Empty dependency array to fetch data once on mount\n\n    const data = dataRef.current; // Access the fetched data\n\n    return ( <\n        div className = \"stats-container\" > {\n            error && < p className = \"error-message\" > Error fetching data: { error } < /p>} {\n            data && data.length > 0 ? ( <\n                >\n                <\n                p className = \"description\" >\n                <\n                strong className = \"red-text\" > Description: < /strong>It displays the count of total students, count of placed and not placed students in each year. < /\n                p > {\n                    data.map((item, index) => ( <\n                        div key = { index }\n                        className = \"stats-card\" >\n                        <\n                        h4 className = \"year\" > { item.year } < /h4> <\n                        p className = \"total-students\" > Total Students: < span > { item.total } < /span></p >\n                        <\n                        p className = \"placed\" > Placed: < span > { item.placed } < /span></p >\n                        <\n                        p className = \"not-placed\" > Not Placed: < span > { item.notPlaced } < /span></p >\n                        <\n                        /div>\n                    ))\n                } <\n                />\n            ) : ( <\n                p > No data available < /p>\n            )\n        } <\n        /div>\n    );\n};\n\nexport default Stats;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}