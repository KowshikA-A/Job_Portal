{"ast":null,"code":"var _jsxFileName = \"/Users/roopakowshika/placement/placement__/frontend/src/components/Monitoring.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Bar } from 'react-chartjs-2';\nimport 'chart.js/auto';\nimport './Monitoring.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Monitoring() {\n  _s();\n  const [numYears, setNumYears] = useState(2);\n  const [selectedYears, setSelectedYears] = useState(['', '']);\n  const [companyList, setCompanyList] = useState([]);\n  const [selectedCompany, setSelectedCompany] = useState('');\n  const [placement, setPlacement] = useState([]);\n\n  // Fetch companies based on the selected year\n  const fetchCompanies = async year => {\n    try {\n      const response = await axios.get('/api/companies', {\n        params: {\n          year\n        }\n      });\n      if (Array.isArray(response.data)) {\n        setCompanyList(response.data);\n      } else {\n        console.error('Invalid company data structure:', response.data);\n      }\n    } catch (error) {\n      console.error('Error fetching companies:', error);\n    }\n  };\n\n  // Fetch companies when the first year is selected\n  useEffect(() => {\n    if (selectedYears[0]) {\n      fetchCompanies(selectedYears[0]);\n    }\n  }, [selectedYears]);\n\n  // Handle number of years change\n  const handleNumYearsChange = e => {\n    const num = Number(e.target.value);\n    if (num >= 2 && num <= 20) {\n      setNumYears(num);\n      setSelectedYears(new Array(num).fill(''));\n    } else {\n      alert(\"Please select a number of years between 2 and 20.\");\n    }\n  };\n\n  // Handle individual year selection change\n  const handleYearChange = (index, e) => {\n    const newYear = e.target.value;\n    if (selectedYears.includes(newYear)) {\n      alert('Year already selected! Please select a different year.');\n      return;\n    }\n    const newSelectedYears = [...selectedYears];\n    newSelectedYears[index] = newYear;\n    setSelectedYears(newSelectedYears);\n    if (newYear) {\n      fetchCompanies(newYear);\n    }\n  };\n\n  // Handle company selection change\n  const handleCompanyChange = e => {\n    setSelectedCompany(e.target.value);\n  };\n\n  // Fetch placement data based on selected years and company\n  const fetchPlacementData = async () => {\n    const payload = {\n      years: selectedYears.filter(Boolean),\n      company: selectedCompany || null\n    };\n    try {\n      const response = await axios.post('/api/placement', payload);\n      if (Array.isArray(response.data)) {\n        setPlacementData(response.data);\n        console.log('Placement Data:', response.data);\n      } else {\n        console.error('Invalid placement data structure:', response.data);\n      }\n    } catch (error) {\n      console.error('Error fetching placement data:', error);\n    }\n  };\n\n  // Clean and normalize ApplicationStatus to avoid duplicates\n  const normalizeStatus = status => {\n    return status ? status.trim().toLowerCase() : '';\n  };\n\n  // Prepare the chart data\n  const getChartData = () => {\n    const counts = {};\n    const labels = [];\n    placementData.forEach(item => {\n      const status = normalizeStatus(item.ApplicationStatus);\n      const year = item.Year.$numberInt.toString(); // Ensure the year is a string for comparison\n\n      if (!counts[year]) {\n        counts[year] = {};\n      }\n      counts[year][status] = (counts[year][status] || 0) + 1; // Increment count for the status\n\n      if (!labels.includes(status)) {\n        labels.push(status);\n      }\n    });\n    return {\n      labels,\n      datasets: selectedYears.map((year, index) => ({\n        label: `${year} Placements`,\n        data: labels.map(label => counts[year] ? counts[year][normalizeStatus(label)] || 0 : 0),\n        // Corrected access here\n        backgroundColor: `rgba(${(index + 1) * 50}, ${(index + 1) * 100}, ${(index + 1) * 150}, 0.6)`,\n        borderColor: `rgba(${(index + 1) * 50}, ${(index + 1) * 100}, ${(index + 1) * 150}, 1)`,\n        borderWidth: 1\n      }))\n    };\n  };\n  const chartData = getChartData();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"monitoring-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \" Monitoring Placements \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"numYears\",\n      children: \" Select number of years to compare(min 2, max 20): \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 47\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"numYears\",\n      type: \"number\",\n      value: numYears,\n      onChange: handleNumYearsChange,\n      min: \"2\",\n      max: \"20\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 102\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"year-selection-container\",\n      children: [\" \", Array.from({\n        length: numYears\n      }).map((_, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"year-dropdown\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: `year${index}`,\n          children: [\" Year \", index + 1, \": \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 25\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"select\", {\n          id: `year${index}`,\n          value: selectedYears[index] || '',\n          onChange: e => handleYearChange(index, e),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \" Select Year \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 25\n          }, this), \" \", Array.from({\n            length: 20\n          }, (_, i) => 2025 - i).map(year => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: year,\n            children: [\" \", year, \" \"]\n          }, year, true, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 88\n          }, this)), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 92\n        }, this), \" \"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 70\n      }, this)), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"company\",\n      children: \" Select Company(Optional): \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 15\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"select\", {\n      id: \"company\",\n      value: selectedCompany,\n      onChange: handleCompanyChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \" All Companies \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this), \" \", companyList.length > 0 ? companyList.map(company => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: company.name,\n        children: [\" \", company.name, \" \"]\n      }, company._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 40\n      }, this)) : /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \" No Companies Available \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 69\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"submit-btn\",\n      onClick: fetchPlacement,\n      children: \" Submit \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 10\n    }, this), placementData.length > 0 && chartData.labels.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"monitoring-chart\",\n      children: [/*#__PURE__*/_jsxDEV(Bar, {\n        data: chartData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 66\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 14\n  }, this);\n}\n_s(Monitoring, \"/pJ1st1Wgm9ylCPCxcwmxjsSv8o=\");\n_c = Monitoring;\nexport default Monitoring;\nvar _c;\n$RefreshReg$(_c, \"Monitoring\");","map":{"version":3,"names":["React","useState","useEffect","axios","Bar","jsxDEV","_jsxDEV","Monitoring","_s","numYears","setNumYears","selectedYears","setSelectedYears","companyList","setCompanyList","selectedCompany","setSelectedCompany","placement","setPlacement","fetchCompanies","year","response","get","params","Array","isArray","data","console","error","handleNumYearsChange","e","num","Number","target","value","fill","alert","handleYearChange","index","newYear","includes","newSelectedYears","handleCompanyChange","fetchPlacementData","payload","years","filter","Boolean","company","post","setPlacementData","log","normalizeStatus","status","trim","toLowerCase","getChartData","counts","labels","placementData","forEach","item","ApplicationStatus","Year","$numberInt","toString","push","datasets","map","label","backgroundColor","borderColor","borderWidth","chartData","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","type","onChange","min","max","from","length","_","i","name","_id","onClick","fetchPlacement","_c","$RefreshReg$"],"sources":["/Users/roopakowshika/placement/placement__/frontend/src/components/Monitoring.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Bar } from 'react-chartjs-2';\nimport 'chart.js/auto';\nimport './Monitoring.css';\n\nfunction Monitoring() {\n    const [numYears, setNumYears] = useState(2);\n    const [selectedYears, setSelectedYears] = useState(['', '']);\n    const [companyList, setCompanyList] = useState([]);\n    const [selectedCompany, setSelectedCompany] = useState('');\n    const [placement, setPlacement] = useState([]);\n\n    // Fetch companies based on the selected year\n    const fetchCompanies = async(year) => {\n        try {\n            const response = await axios.get('/api/companies', { params: { year } });\n            if (Array.isArray(response.data)) {\n                setCompanyList(response.data);\n            } else {\n                console.error('Invalid company data structure:', response.data);\n            }\n        } catch (error) {\n            console.error('Error fetching companies:', error);\n        }\n    };\n\n    // Fetch companies when the first year is selected\n    useEffect(() => {\n        if (selectedYears[0]) {\n            fetchCompanies(selectedYears[0]);\n        }\n    }, [selectedYears]);\n\n    // Handle number of years change\n    const handleNumYearsChange = (e) => {\n        const num = Number(e.target.value);\n        if (num >= 2 && num <= 20) {\n            setNumYears(num);\n            setSelectedYears(new Array(num).fill(''));\n        } else {\n            alert(\"Please select a number of years between 2 and 20.\");\n        }\n    };\n\n    // Handle individual year selection change\n    const handleYearChange = (index, e) => {\n        const newYear = e.target.value;\n        if (selectedYears.includes(newYear)) {\n            alert('Year already selected! Please select a different year.');\n            return;\n        }\n        const newSelectedYears = [...selectedYears];\n        newSelectedYears[index] = newYear;\n        setSelectedYears(newSelectedYears);\n        if (newYear) {\n            fetchCompanies(newYear);\n        }\n    };\n\n    // Handle company selection change\n    const handleCompanyChange = (e) => {\n        setSelectedCompany(e.target.value);\n    };\n\n    // Fetch placement data based on selected years and company\n    const fetchPlacementData = async() => {\n        const payload = {\n            years: selectedYears.filter(Boolean),\n            company: selectedCompany || null,\n        };\n\n        try {\n            const response = await axios.post('/api/placement', payload);\n            if (Array.isArray(response.data)) {\n                setPlacementData(response.data);\n                console.log('Placement Data:', response.data);\n            } else {\n                console.error('Invalid placement data structure:', response.data);\n            }\n        } catch (error) {\n            console.error('Error fetching placement data:', error);\n        }\n    };\n\n    // Clean and normalize ApplicationStatus to avoid duplicates\n    const normalizeStatus = (status) => {\n        return status ? status.trim().toLowerCase() : '';\n    };\n\n    // Prepare the chart data\n    const getChartData = () => {\n        const counts = {};\n        const labels = [];\n\n        placementData.forEach(item => {\n            const status = normalizeStatus(item.ApplicationStatus);\n            const year = item.Year.$numberInt.toString(); // Ensure the year is a string for comparison\n\n            if (!counts[year]) {\n                counts[year] = {};\n            }\n            counts[year][status] = (counts[year][status] || 0) + 1; // Increment count for the status\n\n            if (!labels.includes(status)) {\n                labels.push(status);\n            }\n        });\n\n        return {\n            labels,\n            datasets: selectedYears.map((year, index) => ({\n                label: `${year} Placements`,\n                data: labels.map(label => counts[year] ? counts[year][normalizeStatus(label)] || 0 : 0), // Corrected access here\n                backgroundColor: `rgba(${(index + 1) * 50}, ${(index + 1) * 100}, ${(index + 1) * 150}, 0.6)`,\n                borderColor: `rgba(${(index + 1) * 50}, ${(index + 1) * 100}, ${(index + 1) * 150}, 1)`,\n                borderWidth: 1,\n            })),\n        };\n    };\n\n    const chartData = getChartData();\n\n    return ( <\n            div className = \"monitoring-container\" >\n            <\n            h2 > Monitoring Placements < /h2> <\n            label htmlFor = \"numYears\" > Select number of years to compare(min 2, max 20): < /label> <\n            input id = \"numYears\"\n            type = \"number\"\n            value = { numYears }\n            onChange = { handleNumYearsChange }\n            min = \"2\"\n            max = \"20\" /\n            >\n            <\n            div className = \"year-selection-container\" > {\n                Array.from({ length: numYears }).map((_, index) => ( <\n                        div key = { index }\n                        className = \"year-dropdown\" >\n                        <\n                        label htmlFor = { `year${index}` } > Year { index + 1 }: < /label> <\n                        select id = { `year${index}` }\n                        value = { selectedYears[index] || '' }\n                        onChange = {\n                            (e) => handleYearChange(index, e)\n                        } >\n                        <\n                        option value = \"\" > Select Year < /option> {\n                        Array.from({ length: 20 }, (_, i) => 2025 - i).map((year) => ( <\n                            option key = { year }\n                            value = { year } > { year } < /option>\n                        ))\n                    } <\n                    /select> < /\n                    div >\n                ))\n        } <\n        /div> <\n    label htmlFor = \"company\" > Select Company(Optional): < /label> <\n    select id = \"company\"\n    value = { selectedCompany }\n    onChange = { handleCompanyChange } >\n        <\n        option value = \"\" > All Companies < /option> {\n    companyList.length > 0 ? (\n        companyList.map((company) => ( <\n            option key = { company._id }\n            value = { company.name } > { company.name } < /option>\n        ))\n    ) : ( <\n        option value = \"\" > No Companies Available < /option>\n    )\n} <\n/select> <\nbutton className = \"submit-btn\"\nonClick = { fetchPlacement } > Submit < /button>\n\n{\n    placementData.length > 0 && chartData.labels.length > 0 && ( <\n        div className = \"monitoring-chart\" >\n        <\n        Bar data = { chartData }\n        /> < /\n        div >\n    )\n} <\n/div>\n);\n}\n\nexport default Monitoring;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}