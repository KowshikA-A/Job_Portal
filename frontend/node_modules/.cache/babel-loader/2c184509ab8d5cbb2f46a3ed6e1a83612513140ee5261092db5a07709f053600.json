{"ast":null,"code":"var _jsxFileName = \"/Users/roopakowshika/placement/placement__/frontend/src/components/YearlyPlacedStudentsChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport './YearlyPlacedStudentsChart.css';\nimport { Line } from 'react-chartjs-2';\nimport axios from 'axios';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\n\n// Register necessary components with Chart.js\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst YearlyStudentStatusChart = () => {\n  _s();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [allStats, setAllStats] = useState([]); // Full data fetched from the API\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        const response = await axios.get('http://localhost:1000/api/stats');\n        const stats = response.data;\n\n        // Check if stats is an array\n        if (!Array.isArray(stats)) {\n          throw new Error('Unexpected data format');\n        }\n        setAllStats(stats); // Store the full dataset\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        setError(error.message || 'Error fetching data');\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n\n  // Sort allStats by year in ascending order\n  const sortedStats = allStats.sort((a, b) => a.year - b.year);\n\n  // Prepare data for chart based on sorted stats\n  const yearsForChart = sortedStats.map(item => item.year);\n  const placedCounts = sortedStats.map(item => item.placed);\n  const notPlacedCounts = sortedStats.map(item => item.notPlaced);\n  const chartDataForDisplay = {\n    labels: yearsForChart,\n    // Show all years in ascending order\n    datasets: [{\n      label: 'Placed Students',\n      data: placedCounts,\n      borderColor: 'rgba(75,192,192,1)',\n      backgroundColor: 'rgba(75,192,192,0.2)',\n      borderWidth: 1\n    }, {\n      label: 'Not Placed Students',\n      data: notPlacedCounts,\n      borderColor: 'rgba(255,99,132,1)',\n      backgroundColor: 'rgba(255,99,132,0.2)',\n      borderWidth: 1\n    }]\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \" Loading chart data... \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 16\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\" Error: \", error, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"onee\",\n      children: \" Placement Analysis \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"one\",\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        className: \"red-text\",\n        children: \"Discription:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), \" It displays the count of placed and not placed students in each year.On hovering the lines in the graphs at certain \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 59\n    }, this), \" \", \" \", chartDataForDisplay.labels.length > 0 ? /*#__PURE__*/_jsxDEV(Line, {\n      data: chartDataForDisplay,\n      options: {\n        responsive: true,\n        plugins: {\n          legend: {\n            position: 'top'\n          },\n          tooltip: {\n            callbacks: {\n              label: function (context) {\n                const dataset = context.dataset;\n                const index = context.dataIndex;\n\n                // Get the placed and not placed values\n                const placedCount = chartDataForDisplay.datasets[0].data[index];\n                const notPlacedCount = chartDataForDisplay.datasets[1].data[index];\n\n                // Calculate the total and percentages\n                const total = placedCount + notPlacedCount;\n                const placedPercentage = total > 0 ? (placedCount / total * 100).toFixed(2) : 0;\n                const notPlacedPercentage = total > 0 ? (notPlacedCount / total * 100).toFixed(2) : 0;\n\n                // Construct the label with count and percentage\n                if (dataset.label === 'Placed Students') {\n                  return `${dataset.label}: ${placedCount} (${placedPercentage}%)`;\n                } else if (dataset.label === 'Not Placed Students') {\n                  return `${dataset.label}: ${notPlacedCount} (${notPlacedPercentage}%)`;\n                }\n              }\n            }\n          }\n        },\n        scales: {\n          x: {\n            title: {\n              display: true,\n              text: 'Year' // X-axis label\n            },\n            type: 'category',\n            ticks: {\n              autoSkip: false // Show all year labels\n            }\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Number of Students' // Y-axis label\n            }\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 55\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \" No data available \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 19\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 14\n  }, this);\n};\n_s(YearlyStudentStatusChart, \"kFFxCKMi7NHWltuqLvyfh3vuV6g=\");\n_c = YearlyStudentStatusChart;\nexport default YearlyStudentStatusChart;\nvar _c;\n$RefreshReg$(_c, \"YearlyStudentStatusChart\");","map":{"version":3,"names":["React","useEffect","useState","Line","axios","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","YearlyStudentStatusChart","_s","loading","setLoading","error","setError","allStats","setAllStats","fetchData","response","get","stats","data","Array","isArray","Error","console","message","sortedStats","sort","a","b","year","yearsForChart","map","item","placedCounts","placed","notPlacedCounts","notPlaced","chartDataForDisplay","labels","datasets","label","borderColor","backgroundColor","borderWidth","children","fileName","_jsxFileName","lineNumber","columnNumber","className","length","options","responsive","plugins","legend","position","tooltip","callbacks","context","dataset","index","dataIndex","placedCount","notPlacedCount","total","placedPercentage","toFixed","notPlacedPercentage","scales","x","title","display","text","type","ticks","autoSkip","y","_c","$RefreshReg$"],"sources":["/Users/roopakowshika/placement/placement__/frontend/src/components/YearlyPlacedStudentsChart.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './YearlyPlacedStudentsChart.css';\nimport { Line } from 'react-chartjs-2';\nimport axios from 'axios';\nimport {\n    Chart as ChartJS,\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend,\n} from 'chart.js';\n\n// Register necessary components with Chart.js\nChartJS.register(\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend\n);\n\nconst YearlyStudentStatusChart = () => {\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [allStats, setAllStats] = useState([]); // Full data fetched from the API\n\n    useEffect(() => {\n        const fetchData = async() => {\n            try {\n                setLoading(true);\n                const response = await axios.get('http://localhost:1000/api/stats');\n                const stats = response.data;\n\n                // Check if stats is an array\n                if (!Array.isArray(stats)) {\n                    throw new Error('Unexpected data format');\n                }\n\n                setAllStats(stats); // Store the full dataset\n                setLoading(false);\n            } catch (error) {\n                console.error('Error fetching data:', error);\n                setError(error.message || 'Error fetching data');\n                setLoading(false);\n            }\n        };\n\n        fetchData();\n    }, []);\n\n    // Sort allStats by year in ascending order\n    const sortedStats = allStats.sort((a, b) => a.year - b.year);\n\n    // Prepare data for chart based on sorted stats\n    const yearsForChart = sortedStats.map(item => item.year);\n    const placedCounts = sortedStats.map(item => item.placed);\n    const notPlacedCounts = sortedStats.map(item => item.notPlaced);\n\n    const chartDataForDisplay = {\n        labels: yearsForChart, // Show all years in ascending order\n        datasets: [{\n                label: 'Placed Students',\n                data: placedCounts,\n                borderColor: 'rgba(75,192,192,1)',\n                backgroundColor: 'rgba(75,192,192,0.2)',\n                borderWidth: 1,\n            },\n            {\n                label: 'Not Placed Students',\n                data: notPlacedCounts,\n                borderColor: 'rgba(255,99,132,1)',\n                backgroundColor: 'rgba(255,99,132,0.2)',\n                borderWidth: 1,\n            },\n        ],\n    };\n\n    if (loading) {\n        return <p > Loading chart data... < /p>;\n    }\n\n    if (error) {\n        return <p > Error: { error } < /p>;\n    }\n\n    return ( <\n        div >\n        <\n        h1 className = \"onee\" > Placement Analysis < /h1> <\n        p className = \"one\" >\n        <\n        strong className = \"red-text\" >\n        Discription:\n        <\n        /strong> It displays the count of placed and not placed students in each year.On hovering the lines in the graphs at certain < /\n        p > { /* Render chart */ } {\n            chartDataForDisplay.labels.length > 0 ? ( <\n                Line data = { chartDataForDisplay }\n                options = {\n                    {\n                        responsive: true,\n                        plugins: {\n                            legend: {\n                                position: 'top',\n                            },\n                            tooltip: {\n                                callbacks: {\n                                    label: function(context) {\n                                        const dataset = context.dataset;\n                                        const index = context.dataIndex;\n\n                                        // Get the placed and not placed values\n                                        const placedCount = chartDataForDisplay.datasets[0].data[index];\n                                        const notPlacedCount = chartDataForDisplay.datasets[1].data[index];\n\n                                        // Calculate the total and percentages\n                                        const total = placedCount + notPlacedCount;\n                                        const placedPercentage = total > 0 ? ((placedCount / total) * 100).toFixed(2) : 0;\n                                        const notPlacedPercentage = total > 0 ? ((notPlacedCount / total) * 100).toFixed(2) : 0;\n\n                                        // Construct the label with count and percentage\n                                        if (dataset.label === 'Placed Students') {\n                                            return `${dataset.label}: ${placedCount} (${placedPercentage}%)`;\n                                        } else if (dataset.label === 'Not Placed Students') {\n                                            return `${dataset.label}: ${notPlacedCount} (${notPlacedPercentage}%)`;\n                                        }\n                                    },\n                                },\n                            },\n                        },\n                        scales: {\n                            x: {\n                                title: {\n                                    display: true,\n                                    text: 'Year', // X-axis label\n                                },\n                                type: 'category',\n                                ticks: {\n                                    autoSkip: false, // Show all year labels\n                                },\n                            },\n                            y: {\n                                title: {\n                                    display: true,\n                                    text: 'Number of Students', // Y-axis label\n                                },\n                            },\n                        },\n                    }\n                }\n                />\n            ) : ( <\n                p > No data available < /p>\n            )\n        } <\n        /div>\n    );\n};\n\nexport default YearlyStudentStatusChart;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAO,iCAAiC;AACxC,SAASC,IAAI,QAAQ,iBAAiB;AACtC,OAAOC,KAAK,MAAM,OAAO;AACzB,SACIC,KAAK,IAAIC,OAAO,EAChBC,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,KAAK,EACLC,OAAO,EACPC,MAAM,QACH,UAAU;;AAEjB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACAT,OAAO,CAACU,QAAQ,CACZT,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,KAAK,EACLC,OAAO,EACPC,MACJ,CAAC;AAED,MAAMI,wBAAwB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACmB,KAAK,EAAEC,QAAQ,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACqB,QAAQ,EAAEC,WAAW,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAE9CD,SAAS,CAAC,MAAM;IACZ,MAAMwB,SAAS,GAAG,MAAAA,CAAA,KAAW;MACzB,IAAI;QACAL,UAAU,CAAC,IAAI,CAAC;QAChB,MAAMM,QAAQ,GAAG,MAAMtB,KAAK,CAACuB,GAAG,CAAC,iCAAiC,CAAC;QACnE,MAAMC,KAAK,GAAGF,QAAQ,CAACG,IAAI;;QAE3B;QACA,IAAI,CAACC,KAAK,CAACC,OAAO,CAACH,KAAK,CAAC,EAAE;UACvB,MAAM,IAAII,KAAK,CAAC,wBAAwB,CAAC;QAC7C;QAEAR,WAAW,CAACI,KAAK,CAAC,CAAC,CAAC;QACpBR,UAAU,CAAC,KAAK,CAAC;MACrB,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZY,OAAO,CAACZ,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;QAC5CC,QAAQ,CAACD,KAAK,CAACa,OAAO,IAAI,qBAAqB,CAAC;QAChDd,UAAU,CAAC,KAAK,CAAC;MACrB;IACJ,CAAC;IAEDK,SAAS,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMU,WAAW,GAAGZ,QAAQ,CAACa,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,IAAI,GAAGD,CAAC,CAACC,IAAI,CAAC;;EAE5D;EACA,MAAMC,aAAa,GAAGL,WAAW,CAACM,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACH,IAAI,CAAC;EACxD,MAAMI,YAAY,GAAGR,WAAW,CAACM,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACE,MAAM,CAAC;EACzD,MAAMC,eAAe,GAAGV,WAAW,CAACM,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACI,SAAS,CAAC;EAE/D,MAAMC,mBAAmB,GAAG;IACxBC,MAAM,EAAER,aAAa;IAAE;IACvBS,QAAQ,EAAE,CAAC;MACHC,KAAK,EAAE,iBAAiB;MACxBrB,IAAI,EAAEc,YAAY;MAClBQ,WAAW,EAAE,oBAAoB;MACjCC,eAAe,EAAE,sBAAsB;MACvCC,WAAW,EAAE;IACjB,CAAC,EACD;MACIH,KAAK,EAAE,qBAAqB;MAC5BrB,IAAI,EAAEgB,eAAe;MACrBM,WAAW,EAAE,oBAAoB;MACjCC,eAAe,EAAE,sBAAsB;MACvCC,WAAW,EAAE;IACjB,CAAC;EAET,CAAC;EAED,IAAIlC,OAAO,EAAE;IACT,oBAAOJ,OAAA;MAAAuC,QAAA,EAAI;IAAuB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAC3C;EAEA,IAAIrC,KAAK,EAAE;IACP,oBAAON,OAAA;MAAAuC,QAAA,GAAI,UAAQ,EAAEjC,KAAK,EAAE,GAAC;IAAA;MAAAkC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EACtC;EAEA,oBAAS3C,OAAA;IAAAuC,QAAA,gBAELvC,OAAA;MACG4C,SAAS,EAAG,MAAM;MAAAL,QAAA,EAAE;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,KAAC,eAAA3C,OAAA;MAChD4C,SAAS,EAAG,KAAK;MAAAL,QAAA,gBACnBvC,OAAA;QACO4C,SAAS,EAAG,UAAU;QAAAL,QAAA,EAAE;MAE/B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACO,CAAC,yHAAqH;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3H,CAAC,KAAC,EAAsB,GAAC,EACvBX,mBAAmB,CAACC,MAAM,CAACY,MAAM,GAAG,CAAC,gBAAK7C,OAAA,CACtCZ,IAAI;MAAC0B,IAAI,EAAKkB,mBAAqB;MACnCc,OAAO,EACH;QACIC,UAAU,EAAE,IAAI;QAChBC,OAAO,EAAE;UACLC,MAAM,EAAE;YACJC,QAAQ,EAAE;UACd,CAAC;UACDC,OAAO,EAAE;YACLC,SAAS,EAAE;cACPjB,KAAK,EAAE,SAAAA,CAASkB,OAAO,EAAE;gBACrB,MAAMC,OAAO,GAAGD,OAAO,CAACC,OAAO;gBAC/B,MAAMC,KAAK,GAAGF,OAAO,CAACG,SAAS;;gBAE/B;gBACA,MAAMC,WAAW,GAAGzB,mBAAmB,CAACE,QAAQ,CAAC,CAAC,CAAC,CAACpB,IAAI,CAACyC,KAAK,CAAC;gBAC/D,MAAMG,cAAc,GAAG1B,mBAAmB,CAACE,QAAQ,CAAC,CAAC,CAAC,CAACpB,IAAI,CAACyC,KAAK,CAAC;;gBAElE;gBACA,MAAMI,KAAK,GAAGF,WAAW,GAAGC,cAAc;gBAC1C,MAAME,gBAAgB,GAAGD,KAAK,GAAG,CAAC,GAAG,CAAEF,WAAW,GAAGE,KAAK,GAAI,GAAG,EAAEE,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC;gBACjF,MAAMC,mBAAmB,GAAGH,KAAK,GAAG,CAAC,GAAG,CAAED,cAAc,GAAGC,KAAK,GAAI,GAAG,EAAEE,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC;;gBAEvF;gBACA,IAAIP,OAAO,CAACnB,KAAK,KAAK,iBAAiB,EAAE;kBACrC,OAAO,GAAGmB,OAAO,CAACnB,KAAK,KAAKsB,WAAW,KAAKG,gBAAgB,IAAI;gBACpE,CAAC,MAAM,IAAIN,OAAO,CAACnB,KAAK,KAAK,qBAAqB,EAAE;kBAChD,OAAO,GAAGmB,OAAO,CAACnB,KAAK,KAAKuB,cAAc,KAAKI,mBAAmB,IAAI;gBAC1E;cACJ;YACJ;UACJ;QACJ,CAAC;QACDC,MAAM,EAAE;UACJC,CAAC,EAAE;YACCC,KAAK,EAAE;cACHC,OAAO,EAAE,IAAI;cACbC,IAAI,EAAE,MAAM,CAAE;YAClB,CAAC;YACDC,IAAI,EAAE,UAAU;YAChBC,KAAK,EAAE;cACHC,QAAQ,EAAE,KAAK,CAAE;YACrB;UACJ,CAAC;UACDC,CAAC,EAAE;YACCN,KAAK,EAAE;cACHC,OAAO,EAAE,IAAI;cACbC,IAAI,EAAE,oBAAoB,CAAE;YAChC;UACJ;QACJ;MACJ;IACH;MAAA3B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,gBACA3C,OAAA;MAAAuC,QAAA,EACC;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAC7B,EACJ,GAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEb,CAAC;AAACxC,EAAA,CAxIID,wBAAwB;AAAAsE,EAAA,GAAxBtE,wBAAwB;AA0I9B,eAAeA,wBAAwB;AAAC,IAAAsE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}