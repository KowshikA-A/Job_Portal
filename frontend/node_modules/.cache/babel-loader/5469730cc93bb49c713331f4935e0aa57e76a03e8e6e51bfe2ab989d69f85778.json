{"ast":null,"code":"app.get('/api/students', async (req, res) => {\n  const {\n    filter,\n    year,\n    searchTerm,\n    school,\n    type\n  } = req.query;\n  console.log('Received Parameters:', {\n    filter,\n    year,\n    searchTerm,\n    school,\n    type\n  }); // Log parameters as an object\n\n  const query = {};\n  const validStatuses = ['Placed', 'Not placed', 'Shortlisted', 'Applied'];\n  if (filter && validStatuses.includes(filter)) {\n    query.ApplicationStatus = filter;\n  }\n  if (year) query.Year = year;\n  if (school) query.School = school;\n  if (type) query.Type = type;\n  if (searchTerm) {\n    query.$or = [{\n      Name: {\n        $regex: searchTerm,\n        $options: 'i'\n      }\n    }, {\n      Reg_No: {\n        $regex: searchTerm,\n        $options: 'i'\n      }\n    }];\n  }\n  console.log('Built Query:', query); // Log the final query\n\n  try {\n    const students = await Student.find(query);\n    res.json(students);\n  } catch (error) {\n    console.error('Error fetching students:', error);\n    res.status(500).json({\n      message: 'Server error'\n    });\n  }\n});","map":{"version":3,"names":["app","get","req","res","filter","year","searchTerm","school","type","query","console","log","validStatuses","includes","ApplicationStatus","Year","School","Type","$or","Name","$regex","$options","Reg_No","students","Student","find","json","error","status","message"],"sources":["/Users/roopakowshika/placement/placement__/frontend/src/components/VerticalNavBar.js"],"sourcesContent":["app.get('/api/students', async(req, res) => {\n    const { filter, year, searchTerm, school, type } = req.query;\n\n    console.log('Received Parameters:', { filter, year, searchTerm, school, type }); // Log parameters as an object\n\n    const query = {};\n    const validStatuses = ['Placed', 'Not placed', 'Shortlisted', 'Applied'];\n\n    if (filter && validStatuses.includes(filter)) {\n        query.ApplicationStatus = filter;\n    }\n    if (year) query.Year = year;\n    if (school) query.School = school;\n    if (type) query.Type = type;\n\n    if (searchTerm) {\n        query.$or = [\n            { Name: { $regex: searchTerm, $options: 'i' } },\n            { Reg_No: { $regex: searchTerm, $options: 'i' } }\n        ];\n    }\n\n    console.log('Built Query:', query); // Log the final query\n\n    try {\n        const students = await Student.find(query);\n        res.json(students);\n    } catch (error) {\n        console.error('Error fetching students:', error);\n        res.status(500).json({ message: 'Server error' });\n    }\n});"],"mappings":"AAAAA,GAAG,CAACC,GAAG,CAAC,eAAe,EAAE,OAAMC,GAAG,EAAEC,GAAG,KAAK;EACxC,MAAM;IAAEC,MAAM;IAAEC,IAAI;IAAEC,UAAU;IAAEC,MAAM;IAAEC;EAAK,CAAC,GAAGN,GAAG,CAACO,KAAK;EAE5DC,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAE;IAAEP,MAAM;IAAEC,IAAI;IAAEC,UAAU;IAAEC,MAAM;IAAEC;EAAK,CAAC,CAAC,CAAC,CAAC;;EAEjF,MAAMC,KAAK,GAAG,CAAC,CAAC;EAChB,MAAMG,aAAa,GAAG,CAAC,QAAQ,EAAE,YAAY,EAAE,aAAa,EAAE,SAAS,CAAC;EAExE,IAAIR,MAAM,IAAIQ,aAAa,CAACC,QAAQ,CAACT,MAAM,CAAC,EAAE;IAC1CK,KAAK,CAACK,iBAAiB,GAAGV,MAAM;EACpC;EACA,IAAIC,IAAI,EAAEI,KAAK,CAACM,IAAI,GAAGV,IAAI;EAC3B,IAAIE,MAAM,EAAEE,KAAK,CAACO,MAAM,GAAGT,MAAM;EACjC,IAAIC,IAAI,EAAEC,KAAK,CAACQ,IAAI,GAAGT,IAAI;EAE3B,IAAIF,UAAU,EAAE;IACZG,KAAK,CAACS,GAAG,GAAG,CACR;MAAEC,IAAI,EAAE;QAAEC,MAAM,EAAEd,UAAU;QAAEe,QAAQ,EAAE;MAAI;IAAE,CAAC,EAC/C;MAAEC,MAAM,EAAE;QAAEF,MAAM,EAAEd,UAAU;QAAEe,QAAQ,EAAE;MAAI;IAAE,CAAC,CACpD;EACL;EAEAX,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEF,KAAK,CAAC,CAAC,CAAC;;EAEpC,IAAI;IACA,MAAMc,QAAQ,GAAG,MAAMC,OAAO,CAACC,IAAI,CAAChB,KAAK,CAAC;IAC1CN,GAAG,CAACuB,IAAI,CAACH,QAAQ,CAAC;EACtB,CAAC,CAAC,OAAOI,KAAK,EAAE;IACZjB,OAAO,CAACiB,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChDxB,GAAG,CAACyB,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;MAAEG,OAAO,EAAE;IAAe,CAAC,CAAC;EACrD;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}