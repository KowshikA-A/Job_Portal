{"ast":null,"code":"var _jsxFileName = \"/Users/roopakowshika/placement/placement__/frontend/src/components/Monitoring.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios'; // To make API requests\nimport { Bar } from 'react-chartjs-2'; // For the chart\nimport 'chart.js/auto';\nimport './Monitoring.css'; // Import the CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Monitoring() {\n  _s();\n  const [numYears, setNumYears] = useState(2); // Default number of years\n  const [selectedYears, setSelectedYears] = useState([]); // Selected years\n  const [companyList, setCompanyList] = useState([]); // Company list from API\n  const [selectedCompany, setSelectedCompany] = useState(''); // Selected company\n  const [placementData, setPlacementData] = useState([]); // Placement data for chart\n\n  // Fetch the list of companies on component mount\n  useEffect(() => {\n    const fetchCompanies = async () => {\n      try {\n        const response = await axios.get('/api/company'); // Ensure this matches your backend route\n        console.log('Company Response:', response.data); // Debugging line\n\n        if (Array.isArray(response.data)) {\n          setCompanyList(response.data);\n        } else {\n          console.error('Invalid company data structure:', response.data);\n        }\n      } catch (error) {\n        console.error('Error fetching companies:', error);\n      }\n    };\n    fetchCompanies();\n  }, []);\n\n  // Handle changes in the number of years to compare\n  const handleNumYearsChange = e => {\n    const num = Number(e.target.value);\n    if (num >= 2 && num <= 20) {\n      // Allow up to 20 years\n      setNumYears(num);\n      setSelectedYears(new Array(num).fill('')); // Reset the selected years array\n    } else {\n      alert(\"Please select a number of years between 2 and 20.\");\n    }\n  };\n\n  // Handle year selection change\n  const handleYearChange = (index, e) => {\n    const newSelectedYears = [...selectedYears];\n    newSelectedYears[index] = e.target.value;\n    setSelectedYears(newSelectedYears);\n  };\n\n  // Handle company selection change\n  const handleCompanyChange = e => {\n    setSelectedCompany(e.target.value);\n  };\n\n  // Function to get the count for a specific status\n  const getStatusCount = (yearData, year, status) => {\n    return yearData[year] && yearData[year][status] || 0;\n  };\n\n  // Fetch placement data based on selected years and company\n  const fetchPlacementData = async () => {\n    if (selectedYears.some(year => year === '')) {\n      alert(\"Please select all years.\");\n      return; // Exit if not all years are selected\n    }\n    const payload = {\n      years: selectedYears,\n      company: selectedCompany || null\n    };\n    try {\n      const response = await axios.post('/api/placement', payload);\n      if (Array.isArray(response.data)) {\n        const yearData = {}; // Object to store counts by year and status\n        response.data.forEach(item => {\n          const {\n            year,\n            ApplicationStatus,\n            count\n          } = item;\n          if (!yearData[year]) {\n            yearData[year] = {}; // Create a new year object if it doesn't exist\n          }\n          yearData[year][ApplicationStatus] = count; // Set the count for this status\n        });\n\n        // Convert yearData to an array format suitable for the chart\n        const transformedData = selectedYears.map(year => {\n          return {\n            year,\n            statuses: ['Placed', 'Not Placed', 'Shortlisted', 'Applied'].map(status => ({\n              status,\n              count: getStatusCount(yearData, year, status) // Use the helper function\n            }))\n          };\n        });\n        setPlacementData(transformedData);\n      } else {\n        console.error('Invalid placement data structure:', response.data);\n      }\n    } catch (error) {\n      console.error('Error fetching placement data:', error);\n    }\n  };\n\n  // Prepare data for the chart\n  const chartData = {\n    labels: ['Placed', 'Not Placed', 'Shortlisted', 'Applied'],\n    // Using ApplicationStatus for labels\n    datasets: selectedYears.map((year, index) => {\n      const yearData = placementData.find(data => data.year === year);\n      return {\n        label: `${year} Placements`,\n        data: yearData ? yearData.statuses.map(status => status.count) : [],\n        backgroundColor: `rgba(${(index + 1) * 50}, ${(index + 1) * 100}, ${(index + 1) * 150}, 0.6)`,\n        borderColor: `rgba(${(index + 1) * 50}, ${(index + 1) * 100}, ${(index + 1) * 150}, 1)`,\n        borderWidth: 1\n      };\n    })\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"monitoring-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \" Monitoring Placements \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"numYears\",\n      children: \" Select number of years to compare(min 2, max 20): \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"numYears\",\n      type: \"number\",\n      value: numYears,\n      onChange: handleNumYearsChange,\n      min: \"2\",\n      max: \"20\" // Set max to 20\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 102\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"year-selection-container\",\n      children: [\" \", Array.from({\n        length: numYears\n      }).map((_, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"year-dropdown\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: `year${index}`,\n          children: [\" Year \", index + 1, \": \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 25\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"select\", {\n          id: `year${index}`,\n          value: selectedYears[index] || '',\n          onChange: e => handleYearChange(index, e),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \" Select Year \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 25\n          }, this), \" \", Array.from({\n            length: 20\n          }, (_, i) => 2025 - i).map(year => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: year,\n            children: [\" \", year, \" \"]\n          }, year, true, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 86\n          }, this)), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 92\n        }, this), \" \"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 70\n      }, this)), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 61\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"company\",\n      children: \" Select Company: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 5\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"select\", {\n      id: \"company\",\n      value: selectedCompany,\n      onChange: handleCompanyChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \" All Companies \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), \" \", companyList.map(company => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: company.name,\n        children: [\" \", company.name, \" \"]\n      }, company.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 34\n      }, this)), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 59\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchPlacementData,\n      children: \" Fetch Placement Data \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: [\" \", placementData.length > 0 ? /*#__PURE__*/_jsxDEV(Bar, {\n        data: chartData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 38\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" No placement data available.Please select years and company. \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 15\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 1\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 14\n  }, this);\n}\n_s(Monitoring, \"DCIJ1D09J/xRPoYSnfvkgzG0mnk=\");\n_c = Monitoring;\nexport default Monitoring;\nvar _c;\n$RefreshReg$(_c, \"Monitoring\");","map":{"version":3,"names":["React","useState","useEffect","axios","Bar","jsxDEV","_jsxDEV","Monitoring","_s","numYears","setNumYears","selectedYears","setSelectedYears","companyList","setCompanyList","selectedCompany","setSelectedCompany","placementData","setPlacementData","fetchCompanies","response","get","console","log","data","Array","isArray","error","handleNumYearsChange","e","num","Number","target","value","fill","alert","handleYearChange","index","newSelectedYears","handleCompanyChange","getStatusCount","yearData","year","status","fetchPlacementData","some","payload","years","company","post","forEach","item","ApplicationStatus","count","transformedData","map","statuses","chartData","labels","datasets","find","label","backgroundColor","borderColor","borderWidth","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","type","onChange","min","max","from","length","_","i","name","onClick","_c","$RefreshReg$"],"sources":["/Users/roopakowshika/placement/placement__/frontend/src/components/Monitoring.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios'; // To make API requests\nimport { Bar } from 'react-chartjs-2'; // For the chart\nimport 'chart.js/auto';\nimport './Monitoring.css'; // Import the CSS file\n\nfunction Monitoring() {\n    const [numYears, setNumYears] = useState(2); // Default number of years\n    const [selectedYears, setSelectedYears] = useState([]); // Selected years\n    const [companyList, setCompanyList] = useState([]); // Company list from API\n    const [selectedCompany, setSelectedCompany] = useState(''); // Selected company\n    const [placementData, setPlacementData] = useState([]); // Placement data for chart\n\n    // Fetch the list of companies on component mount\n    useEffect(() => {\n        const fetchCompanies = async() => {\n            try {\n                const response = await axios.get('/api/company'); // Ensure this matches your backend route\n                console.log('Company Response:', response.data); // Debugging line\n\n                if (Array.isArray(response.data)) {\n                    setCompanyList(response.data);\n                } else {\n                    console.error('Invalid company data structure:', response.data);\n                }\n            } catch (error) {\n                console.error('Error fetching companies:', error);\n            }\n        };\n\n        fetchCompanies();\n    }, []);\n\n    // Handle changes in the number of years to compare\n    const handleNumYearsChange = (e) => {\n        const num = Number(e.target.value);\n        if (num >= 2 && num <= 20) { // Allow up to 20 years\n            setNumYears(num);\n            setSelectedYears(new Array(num).fill('')); // Reset the selected years array\n        } else {\n            alert(\"Please select a number of years between 2 and 20.\");\n        }\n    };\n\n    // Handle year selection change\n    const handleYearChange = (index, e) => {\n        const newSelectedYears = [...selectedYears];\n        newSelectedYears[index] = e.target.value;\n        setSelectedYears(newSelectedYears);\n    };\n\n    // Handle company selection change\n    const handleCompanyChange = (e) => {\n        setSelectedCompany(e.target.value);\n    };\n\n    // Function to get the count for a specific status\n    const getStatusCount = (yearData, year, status) => {\n        return (yearData[year] && yearData[year][status]) || 0;\n    };\n\n    // Fetch placement data based on selected years and company\n    const fetchPlacementData = async() => {\n        if (selectedYears.some(year => year === '')) {\n            alert(\"Please select all years.\");\n            return; // Exit if not all years are selected\n        }\n\n        const payload = {\n            years: selectedYears,\n            company: selectedCompany || null,\n        };\n\n        try {\n            const response = await axios.post('/api/placement', payload);\n            if (Array.isArray(response.data)) {\n                const yearData = {}; // Object to store counts by year and status\n                response.data.forEach(item => {\n                    const { year, ApplicationStatus, count } = item;\n                    if (!yearData[year]) {\n                        yearData[year] = {}; // Create a new year object if it doesn't exist\n                    }\n                    yearData[year][ApplicationStatus] = count; // Set the count for this status\n                });\n\n                // Convert yearData to an array format suitable for the chart\n                const transformedData = selectedYears.map(year => {\n                    return {\n                        year,\n                        statuses: ['Placed', 'Not Placed', 'Shortlisted', 'Applied'].map(status => ({\n                            status,\n                            count: getStatusCount(yearData, year, status), // Use the helper function\n                        })),\n                    };\n                });\n\n                setPlacementData(transformedData);\n            } else {\n                console.error('Invalid placement data structure:', response.data);\n            }\n        } catch (error) {\n            console.error('Error fetching placement data:', error);\n        }\n    };\n\n    // Prepare data for the chart\n    const chartData = {\n        labels: ['Placed', 'Not Placed', 'Shortlisted', 'Applied'], // Using ApplicationStatus for labels\n        datasets: selectedYears.map((year, index) => {\n            const yearData = placementData.find(data => data.year === year);\n            return {\n                label: `${year} Placements`,\n                data: yearData ? yearData.statuses.map(status => status.count) : [],\n                backgroundColor: `rgba(${(index + 1) * 50}, ${(index + 1) * 100}, ${(index + 1) * 150}, 0.6)`,\n                borderColor: `rgba(${(index + 1) * 50}, ${(index + 1) * 100}, ${(index + 1) * 150}, 1)`,\n                borderWidth: 1,\n            };\n        }),\n    };\n\n    return ( <\n            div className = \"monitoring-container\" >\n            <\n            h2 > Monitoring Placements < /h2>\n\n            <\n            label htmlFor = \"numYears\" > Select number of years to compare(min 2, max 20): < /label> <\n            input id = \"numYears\"\n            type = \"number\"\n            value = { numYears }\n            onChange = { handleNumYearsChange }\n            min = \"2\"\n            max = \"20\" // Set max to 20\n            /\n            >\n\n            { /* Year selection dropdowns side by side */ } <\n            div className = \"year-selection-container\" > {\n                Array.from({ length: numYears }).map((_, index) => ( <\n                        div key = { index }\n                        className = \"year-dropdown\" >\n                        <\n                        label htmlFor = { `year${index}` } > Year { index + 1 }: < /label> <\n                        select id = { `year${index}` }\n                        value = { selectedYears[index] || '' }\n                        onChange = {\n                            (e) => handleYearChange(index, e)\n                        } >\n                        <\n                        option value = \"\" > Select Year < /option> {\n                        Array.from({ length: 20 }, (_, i) => 2025 - i).map(year => ( <\n                            option key = { year }\n                            value = { year } > { year } < /option>\n                        ))\n                    } <\n                    /select> < /\n                    div >\n                ))\n        } <\n        /div>\n\n    <\n    label htmlFor = \"company\" > Select Company: < /label> <\n    select id = \"company\"\n    value = { selectedCompany }\n    onChange = { handleCompanyChange } >\n        <\n        option value = \"\" > All Companies < /option> {\n    companyList.map(company => ( <\n        option key = { company.id }\n        value = { company.name } > { company.name } < /option>\n    ))\n} <\n/select>\n\n<\nbutton onClick = { fetchPlacementData } > Fetch Placement Data < /button>\n\n<\ndiv className = \"chart-container\" > {\n        placementData.length > 0 ? ( <\n            Bar data = { chartData }\n            />\n        ) : ( <\n            p > No placement data available.Please select years and company. < /p>\n        )\n    } <\n    /div> < /\n    div >\n);\n}\n\nexport default Monitoring;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}