{"ast":null,"code":"var _jsxFileName = \"/Users/roopakowshika/placement/placement__/frontend/src/components/Monitoring.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Bar } from 'react-chartjs-2';\nimport 'chart.js/auto';\nimport './Monitoring.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Monitoring() {\n  _s();\n  const [numYears, setNumYears] = useState(2);\n  const [selectedYears, setSelectedYears] = useState([]);\n  const [companyList, setCompanyList] = useState([]);\n  const [selectedCompany, setSelectedCompany] = useState('');\n  const [placementData, setPlacementData] = useState([]);\n  const [chartData, setChartData] = useState({\n    labels: [],\n    datasets: []\n  });\n  const fetchCompanies = async year => {\n    try {\n      const response = await axios.get('/api/companies', {\n        params: {\n          year\n        }\n      });\n      if (Array.isArray(response.data)) {\n        setCompanyList(response.data);\n      } else {\n        console.error('Invalid company data structure:', response.data);\n      }\n    } catch (error) {\n      console.error('Error fetching companies:', error);\n    }\n  };\n  const fetchPlacementData = async () => {\n    try {\n      const response = await axios.post('/api/placement', {\n        years: selectedYears,\n        company: selectedCompany\n      });\n      setPlacementData(response.data);\n    } catch (error) {\n      console.error('Error fetching placement data:', error);\n    }\n  };\n  const createChartData = () => {\n    const labels = [...new Set(placementData.map(item => item.Year))];\n    const statusCounts = {};\n    const statuses = [...new Set(placementData.map(item => item.ApplicationStatus))];\n    statuses.forEach(status => {\n      statusCounts[status] = labels.map(label => {\n        const count = placementData.find(item => item.Year === label && item.ApplicationStatus === status);\n        return count ? count.count : 0;\n      });\n    });\n    const datasets = statuses.map((status, index) => ({\n      label: status,\n      data: statusCounts[status],\n      backgroundColor: `rgba(${index * 50}, ${100 + index * 20}, ${200}, 0.5)`,\n      borderColor: `rgba(${index * 50}, ${100 + index * 20}, ${200}, 1)`,\n      borderWidth: 1\n    }));\n    setChartData({\n      labels,\n      datasets\n    });\n  };\n  useEffect(() => {\n    fetchCompanies(selectedYears[0]);\n  }, [selectedYears]);\n  useEffect(() => {\n    if (placementData.length > 0) {\n      createChartData();\n    }\n  }, [placementData]);\n  useEffect(() => {\n    if (selectedYears.length > 0) {\n      fetchPlacementData();\n    }\n  }, [selectedYears, selectedCompany]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"monitoring\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \" Placement Monitoring \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \" Number of Years: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: numYears,\n        onChange: e => setNumYears(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 44\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \" Company: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 12\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedCompany,\n        onChange: e => setSelectedCompany(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \" All Companies \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 9\n        }, this), \" \", companyList.map(company => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: company.name,\n          children: [\" \", company.name, \" \"]\n        }, company.name, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 42\n        }, this)), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 36\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchPlacementData,\n        children: \" Fetch Placement Data \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 18\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 42\n    }, this), \" \", /*#__PURE__*/_jsxDEV(Bar, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 15\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 14\n  }, this);\n}\n_s(Monitoring, \"TVoOux9e5cXUcMK6DrpJ/+573gw=\");\n_c = Monitoring;\nexport default Monitoring;\nvar _c;\n$RefreshReg$(_c, \"Monitoring\");","map":{"version":3,"names":["React","useState","useEffect","axios","Bar","jsxDEV","_jsxDEV","Monitoring","_s","numYears","setNumYears","selectedYears","setSelectedYears","companyList","setCompanyList","selectedCompany","setSelectedCompany","placementData","setPlacementData","chartData","setChartData","labels","datasets","fetchCompanies","year","response","get","params","Array","isArray","data","console","error","fetchPlacementData","post","years","company","createChartData","Set","map","item","Year","statusCounts","statuses","ApplicationStatus","forEach","status","label","count","find","index","backgroundColor","borderColor","borderWidth","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","name","onClick","_c","$RefreshReg$"],"sources":["/Users/roopakowshika/placement/placement__/frontend/src/components/Monitoring.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Bar } from 'react-chartjs-2';\nimport 'chart.js/auto';\nimport './Monitoring.css';\n\nfunction Monitoring() {\n    const [numYears, setNumYears] = useState(2);\n    const [selectedYears, setSelectedYears] = useState([]);\n    const [companyList, setCompanyList] = useState([]);\n    const [selectedCompany, setSelectedCompany] = useState('');\n    const [placementData, setPlacementData] = useState([]);\n    const [chartData, setChartData] = useState({ labels: [], datasets: [] });\n\n    const fetchCompanies = async(year) => {\n        try {\n            const response = await axios.get('/api/companies', { params: { year } });\n            if (Array.isArray(response.data)) {\n                setCompanyList(response.data);\n            } else {\n                console.error('Invalid company data structure:', response.data);\n            }\n        } catch (error) {\n            console.error('Error fetching companies:', error);\n        }\n    };\n\n    const fetchPlacementData = async() => {\n        try {\n            const response = await axios.post('/api/placement', {\n                years: selectedYears,\n                company: selectedCompany,\n            });\n            setPlacementData(response.data);\n        } catch (error) {\n            console.error('Error fetching placement data:', error);\n        }\n    };\n\n    const createChartData = () => {\n        const labels = [...new Set(placementData.map(item => item.Year))];\n        const statusCounts = {};\n        const statuses = [...new Set(placementData.map(item => item.ApplicationStatus))];\n\n        statuses.forEach(status => {\n            statusCounts[status] = labels.map(label => {\n                const count = placementData.find(item => item.Year === label && item.ApplicationStatus === status);\n                return count ? count.count : 0;\n            });\n        });\n\n        const datasets = statuses.map((status, index) => ({\n            label: status,\n            data: statusCounts[status],\n            backgroundColor: `rgba(${index * 50}, ${100 + index * 20}, ${200}, 0.5)`,\n            borderColor: `rgba(${index * 50}, ${100 + index * 20}, ${200}, 1)`,\n            borderWidth: 1,\n        }));\n\n        setChartData({ labels, datasets });\n    };\n\n    useEffect(() => {\n        fetchCompanies(selectedYears[0]);\n    }, [selectedYears]);\n\n    useEffect(() => {\n        if (placementData.length > 0) {\n            createChartData();\n        }\n    }, [placementData]);\n\n    useEffect(() => {\n        if (selectedYears.length > 0) {\n            fetchPlacementData();\n        }\n    }, [selectedYears, selectedCompany]);\n\n    return ( <\n        div className = \"monitoring\" >\n        <\n        h2 > Placement Monitoring < /h2> <\n        div >\n        <\n        label > Number of Years: < /label> <\n        input type = \"number\"\n        value = { numYears }\n        onChange = {\n            (e) => setNumYears(e.target.value) }\n        /> <\n        label > Company: < /label> <\n        select value = { selectedCompany }\n        onChange = {\n            (e) => setSelectedCompany(e.target.value) } >\n        <\n        option value = \"\" > All Companies < /option> {\n            companyList.map(company => ( <\n                option key = { company.name }\n                value = { company.name } > { company.name } < /option>\n            ))\n        } <\n        /select> <\n        button onClick = { fetchPlacementData } > Fetch Placement Data < /button> <\n        /div> <\n        Bar data = { chartData }\n        /> <\n        /div>\n    );\n}\n\nexport default Monitoring;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,GAAG,QAAQ,iBAAiB;AACrC,OAAO,eAAe;AACtB,OAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC;EAC3C,MAAM,CAACU,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACY,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACc,eAAe,EAAEC,kBAAkB,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACgB,aAAa,EAAEC,gBAAgB,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACkB,SAAS,EAAEC,YAAY,CAAC,GAAGnB,QAAQ,CAAC;IAAEoB,MAAM,EAAE,EAAE;IAAEC,QAAQ,EAAE;EAAG,CAAC,CAAC;EAExE,MAAMC,cAAc,GAAG,MAAMC,IAAI,IAAK;IAClC,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMtB,KAAK,CAACuB,GAAG,CAAC,gBAAgB,EAAE;QAAEC,MAAM,EAAE;UAAEH;QAAK;MAAE,CAAC,CAAC;MACxE,IAAII,KAAK,CAACC,OAAO,CAACJ,QAAQ,CAACK,IAAI,CAAC,EAAE;QAC9BhB,cAAc,CAACW,QAAQ,CAACK,IAAI,CAAC;MACjC,CAAC,MAAM;QACHC,OAAO,CAACC,KAAK,CAAC,iCAAiC,EAAEP,QAAQ,CAACK,IAAI,CAAC;MACnE;IACJ,CAAC,CAAC,OAAOE,KAAK,EAAE;MACZD,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACrD;EACJ,CAAC;EAED,MAAMC,kBAAkB,GAAG,MAAAA,CAAA,KAAW;IAClC,IAAI;MACA,MAAMR,QAAQ,GAAG,MAAMtB,KAAK,CAAC+B,IAAI,CAAC,gBAAgB,EAAE;QAChDC,KAAK,EAAExB,aAAa;QACpByB,OAAO,EAAErB;MACb,CAAC,CAAC;MACFG,gBAAgB,CAACO,QAAQ,CAACK,IAAI,CAAC;IACnC,CAAC,CAAC,OAAOE,KAAK,EAAE;MACZD,OAAO,CAACC,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IAC1D;EACJ,CAAC;EAED,MAAMK,eAAe,GAAGA,CAAA,KAAM;IAC1B,MAAMhB,MAAM,GAAG,CAAC,GAAG,IAAIiB,GAAG,CAACrB,aAAa,CAACsB,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC;IACjE,MAAMC,YAAY,GAAG,CAAC,CAAC;IACvB,MAAMC,QAAQ,GAAG,CAAC,GAAG,IAAIL,GAAG,CAACrB,aAAa,CAACsB,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACI,iBAAiB,CAAC,CAAC,CAAC;IAEhFD,QAAQ,CAACE,OAAO,CAACC,MAAM,IAAI;MACvBJ,YAAY,CAACI,MAAM,CAAC,GAAGzB,MAAM,CAACkB,GAAG,CAACQ,KAAK,IAAI;QACvC,MAAMC,KAAK,GAAG/B,aAAa,CAACgC,IAAI,CAACT,IAAI,IAAIA,IAAI,CAACC,IAAI,KAAKM,KAAK,IAAIP,IAAI,CAACI,iBAAiB,KAAKE,MAAM,CAAC;QAClG,OAAOE,KAAK,GAAGA,KAAK,CAACA,KAAK,GAAG,CAAC;MAClC,CAAC,CAAC;IACN,CAAC,CAAC;IAEF,MAAM1B,QAAQ,GAAGqB,QAAQ,CAACJ,GAAG,CAAC,CAACO,MAAM,EAAEI,KAAK,MAAM;MAC9CH,KAAK,EAAED,MAAM;MACbhB,IAAI,EAAEY,YAAY,CAACI,MAAM,CAAC;MAC1BK,eAAe,EAAE,QAAQD,KAAK,GAAG,EAAE,KAAK,GAAG,GAAGA,KAAK,GAAG,EAAE,KAAK,GAAG,QAAQ;MACxEE,WAAW,EAAE,QAAQF,KAAK,GAAG,EAAE,KAAK,GAAG,GAAGA,KAAK,GAAG,EAAE,KAAK,GAAG,MAAM;MAClEG,WAAW,EAAE;IACjB,CAAC,CAAC,CAAC;IAEHjC,YAAY,CAAC;MAAEC,MAAM;MAAEC;IAAS,CAAC,CAAC;EACtC,CAAC;EAEDpB,SAAS,CAAC,MAAM;IACZqB,cAAc,CAACZ,aAAa,CAAC,CAAC,CAAC,CAAC;EACpC,CAAC,EAAE,CAACA,aAAa,CAAC,CAAC;EAEnBT,SAAS,CAAC,MAAM;IACZ,IAAIe,aAAa,CAACqC,MAAM,GAAG,CAAC,EAAE;MAC1BjB,eAAe,CAAC,CAAC;IACrB;EACJ,CAAC,EAAE,CAACpB,aAAa,CAAC,CAAC;EAEnBf,SAAS,CAAC,MAAM;IACZ,IAAIS,aAAa,CAAC2C,MAAM,GAAG,CAAC,EAAE;MAC1BrB,kBAAkB,CAAC,CAAC;IACxB;EACJ,CAAC,EAAE,CAACtB,aAAa,EAAEI,eAAe,CAAC,CAAC;EAEpC,oBAAST,OAAA;IACDiD,SAAS,EAAG,YAAY;IAAAC,QAAA,gBAC5BlD,OAAA;MAAAkD,QAAA,EACI;IAAsB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,KAAC,eAAAtD,OAAA;MAAAkD,QAAA,gBAEjClD,OAAA;QAAAkD,QAAA,EACO;MAAkB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,KAAC,eAAAtD,OAAA;QAC7BuD,IAAI,EAAG,QAAQ;QACrBC,KAAK,EAAKrD,QAAU;QACpBsD,QAAQ,EACHC,CAAC,IAAKtD,WAAW,CAACsD,CAAC,CAACC,MAAM,CAACH,KAAK;MAAG;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvC,CAAC,KAAC,eAAAtD,OAAA;QAAAkD,QAAA,EACI;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,KAAC,eAAAtD,OAAA;QACpBwD,KAAK,EAAK/C,eAAiB;QAClCgD,QAAQ,EACHC,CAAC,IAAKhD,kBAAkB,CAACgD,CAAC,CAACC,MAAM,CAACH,KAAK,CAAG;QAAAN,QAAA,gBAC/ClD,OAAA;UACOwD,KAAK,EAAG,EAAE;UAAAN,QAAA,EAAE;QAAe;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAS,CAAC,KAAC,EACzC/C,WAAW,CAAC0B,GAAG,CAACH,OAAO,iBAAM9B,OAAA;UAEzBwD,KAAK,EAAK1B,OAAO,CAAC8B,IAAM;UAAAV,QAAA,GAAE,GAAC,EAAEpB,OAAO,CAAC8B,IAAI,EAAE,GAAC;QAAA,GAD7B9B,OAAO,CAAC8B,IAAI;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC0B,CACxD,CAAC,EACL,GAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACK,CAAC,KAAC,eAAAtD,OAAA;QACF6D,OAAO,EAAKlC,kBAAoB;QAAAuB,QAAA,EAAE;MAAsB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAS,CAAC,KAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtE,CAAC,KAAC,eAAAtD,OAAA,CACNF,GAAG;MAAC0B,IAAI,EAAKX;IAAW;MAAAsC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvB,CAAC,KAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEb;AAACpD,EAAA,CAtGQD,UAAU;AAAA6D,EAAA,GAAV7D,UAAU;AAwGnB,eAAeA,UAAU;AAAC,IAAA6D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}