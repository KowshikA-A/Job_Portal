{"ast":null,"code":"var _jsxFileName = \"/Users/roopakowshika/placement/placement__/frontend/src/components/Monitoring.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Bar } from 'react-chartjs-2';\nimport 'chart.js/auto';\nimport './Monitoring.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Monitoring() {\n  _s();\n  const [numYears, setNumYears] = useState(2);\n  const [selectedYears, setSelectedYears] = useState(['', '']);\n  const [companyList, setCompanyList] = useState([]);\n  const [selectedCompany, setSelectedCompany] = useState('');\n  const [placementData, setPlacementData] = useState([]);\n\n  // Fetch companies based on the selected year\n  const fetchCompanies = async year => {\n    try {\n      const response = await axios.get('/api/companies', {\n        params: {\n          year\n        }\n      });\n      if (Array.isArray(response.data)) {\n        setCompanyList(response.data);\n      } else {\n        console.error('Invalid company data structure:', response.data);\n      }\n    } catch (error) {\n      console.error('Error fetching companies:', error);\n    }\n  };\n\n  // Fetch companies when the selected years change\n  useEffect(() => {\n    selectedYears.forEach(year => {\n      if (year) {\n        fetchCompanies(year);\n      }\n    });\n  }, [selectedYears]);\n\n  // Handle number of years change\n  const handleNumYearsChange = e => {\n    const num = Number(e.target.value);\n    if (num >= 2 && num <= 20) {\n      setNumYears(num);\n      setSelectedYears(new Array(num).fill(''));\n    } else {\n      alert(\"Please select a number of years between 2 and 20.\");\n    }\n  };\n\n  // Handle individual year selection change\n  const handleYearChange = (index, e) => {\n    const newYear = e.target.value;\n    if (selectedYears.includes(newYear)) {\n      alert('Year already selected! Please select a different year.');\n      return;\n    }\n    const newSelectedYears = [...selectedYears];\n    newSelectedYears[index] = newYear;\n    setSelectedYears(newSelectedYears);\n  };\n\n  // Handle company selection change\n  const handleCompanyChange = e => {\n    setSelectedCompany(e.target.value);\n  };\n\n  // Fetch placement data based on selected years and company\n  const fetchPlacementData = async () => {\n    const payload = {\n      years: selectedYears.filter(Boolean),\n      company: selectedCompany || null\n    };\n    try {\n      const response = await axios.post('/api/placement', payload);\n      if (Array.isArray(response.data)) {\n        setPlacementData(response.data);\n        console.log('Placement Data:', response.data);\n      } else {\n        console.error('Invalid placement data structure:', response.data);\n      }\n    } catch (error) {\n      console.error('Error fetching placement data:', error);\n    }\n  };\n\n  // Clean and normalize ApplicationStatus to avoid duplicates\n  const normalizeStatus = status => {\n    return status ? status.trim().toLowerCase() : '';\n  };\n\n  // Prepare the chart data\n  const getChartData = () => {\n    const counts = {};\n    const labels = [];\n    placementData.forEach(item => {\n      const status = normalizeStatus(item.ApplicationStatus);\n      const year = item.Year && item.Year.$numberInt ? item.Year.$numberInt.toString() : null; // Properly access properties\n\n      if (!year) {\n        console.warn('Year is undefined for item:', item);\n        return; // Skip this item if year is not defined\n      }\n\n      // Count occurrences of each status by year\n      if (!counts[year]) {\n        counts[year] = {};\n      }\n      counts[year][status] = (counts[year][status] || 0) + 1;\n\n      // Add year to labels if not already present\n      if (!labels.includes(year)) {\n        labels.push(year);\n      }\n    });\n\n    // Prepare datasets for the chart\n    const datasets = Object.keys(counts).map(year => ({\n      label: year,\n      data: ['applied', 'shortlisted', 'placed', 'not placed'].map(status => counts[year][status] || 0),\n      backgroundColor: 'rgba(75,192,192,0.4)',\n      borderColor: 'rgba(75,192,192,1)',\n      borderWidth: 1\n    }));\n    return {\n      labels: ['Applied', 'Shortlisted', 'Placed', 'Not Placed'],\n      datasets\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"monitoring\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \" Monitoring Placement Data \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }, this), \" \", \" \", \" \", /*#__PURE__*/_jsxDEV(Bar, {\n      data: getChartData()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 141\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 14\n  }, this);\n}\n_s(Monitoring, \"d5UitY9ekF9D4xSpWadTxWD1u2Q=\");\n_c = Monitoring;\nexport default Monitoring;\nvar _c;\n$RefreshReg$(_c, \"Monitoring\");","map":{"version":3,"names":["React","useState","useEffect","axios","Bar","jsxDEV","_jsxDEV","Monitoring","_s","numYears","setNumYears","selectedYears","setSelectedYears","companyList","setCompanyList","selectedCompany","setSelectedCompany","placementData","setPlacementData","fetchCompanies","year","response","get","params","Array","isArray","data","console","error","forEach","handleNumYearsChange","e","num","Number","target","value","fill","alert","handleYearChange","index","newYear","includes","newSelectedYears","handleCompanyChange","fetchPlacementData","payload","years","filter","Boolean","company","post","log","normalizeStatus","status","trim","toLowerCase","getChartData","counts","labels","item","ApplicationStatus","Year","$numberInt","toString","warn","push","datasets","Object","keys","map","label","backgroundColor","borderColor","borderWidth","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/roopakowshika/placement/placement__/frontend/src/components/Monitoring.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Bar } from 'react-chartjs-2';\nimport 'chart.js/auto';\nimport './Monitoring.css';\n\nfunction Monitoring() {\n    const [numYears, setNumYears] = useState(2);\n    const [selectedYears, setSelectedYears] = useState(['', '']);\n    const [companyList, setCompanyList] = useState([]);\n    const [selectedCompany, setSelectedCompany] = useState('');\n    const [placementData, setPlacementData] = useState([]);\n\n    // Fetch companies based on the selected year\n    const fetchCompanies = async(year) => {\n        try {\n            const response = await axios.get('/api/companies', { params: { year } });\n            if (Array.isArray(response.data)) {\n                setCompanyList(response.data);\n            } else {\n                console.error('Invalid company data structure:', response.data);\n            }\n        } catch (error) {\n            console.error('Error fetching companies:', error);\n        }\n    };\n\n    // Fetch companies when the selected years change\n    useEffect(() => {\n        selectedYears.forEach(year => {\n            if (year) {\n                fetchCompanies(year);\n            }\n        });\n    }, [selectedYears]);\n\n    // Handle number of years change\n    const handleNumYearsChange = (e) => {\n        const num = Number(e.target.value);\n        if (num >= 2 && num <= 20) {\n            setNumYears(num);\n            setSelectedYears(new Array(num).fill(''));\n        } else {\n            alert(\"Please select a number of years between 2 and 20.\");\n        }\n    };\n\n    // Handle individual year selection change\n    const handleYearChange = (index, e) => {\n        const newYear = e.target.value;\n        if (selectedYears.includes(newYear)) {\n            alert('Year already selected! Please select a different year.');\n            return;\n        }\n        const newSelectedYears = [...selectedYears];\n        newSelectedYears[index] = newYear;\n        setSelectedYears(newSelectedYears);\n    };\n\n    // Handle company selection change\n    const handleCompanyChange = (e) => {\n        setSelectedCompany(e.target.value);\n    };\n\n    // Fetch placement data based on selected years and company\n    const fetchPlacementData = async() => {\n        const payload = {\n            years: selectedYears.filter(Boolean),\n            company: selectedCompany || null,\n        };\n\n        try {\n            const response = await axios.post('/api/placement', payload);\n            if (Array.isArray(response.data)) {\n                setPlacementData(response.data);\n                console.log('Placement Data:', response.data);\n            } else {\n                console.error('Invalid placement data structure:', response.data);\n            }\n        } catch (error) {\n            console.error('Error fetching placement data:', error);\n        }\n    };\n\n    // Clean and normalize ApplicationStatus to avoid duplicates\n    const normalizeStatus = (status) => {\n        return status ? status.trim().toLowerCase() : '';\n    };\n\n    // Prepare the chart data\n    const getChartData = () => {\n        const counts = {};\n        const labels = [];\n\n        placementData.forEach(item => {\n            const status = normalizeStatus(item.ApplicationStatus);\n            const year = item.Year && item.Year.$numberInt ? item.Year.$numberInt.toString() : null; // Properly access properties\n\n            if (!year) {\n                console.warn('Year is undefined for item:', item);\n                return; // Skip this item if year is not defined\n            }\n\n            // Count occurrences of each status by year\n            if (!counts[year]) {\n                counts[year] = {};\n            }\n            counts[year][status] = (counts[year][status] || 0) + 1;\n\n            // Add year to labels if not already present\n            if (!labels.includes(year)) {\n                labels.push(year);\n            }\n        });\n\n        // Prepare datasets for the chart\n        const datasets = Object.keys(counts).map(year => ({\n            label: year,\n            data: ['applied', 'shortlisted', 'placed', 'not placed'].map(status => counts[year][status] || 0),\n            backgroundColor: 'rgba(75,192,192,0.4)',\n            borderColor: 'rgba(75,192,192,1)',\n            borderWidth: 1,\n        }));\n\n        return { labels: ['Applied', 'Shortlisted', 'Placed', 'Not Placed'], datasets };\n    };\n\n    return ( <\n        div className = \"monitoring\" >\n        <\n        h2 > Monitoring Placement Data < /h2> { /* Add UI for year selection and company selection */ } { /* Add chart rendering logic */ } <\n        Bar data = { getChartData() }\n        /> <\n        /div>\n    );\n}\n\nexport default Monitoring;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}